.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
x
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::raw_container_extract, ptr)
## Testing raw_Container
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'individual'
listOption <- 'combine'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_extract, ptr)
savehistory()
library(cmdline.arguments)
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'individual'
listOption <- 'combine'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'a'
listOption <- 'combine'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
rawOption <- 'v'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'list'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'vector'
listOption <- 'combine'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'list'
listOption <- 'combine'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'v'
listOption <- 'combine'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'v'
listOption <- 'v'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
rawOption <- 'l'
listOption <- 'v'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
library(cmdline.arguments)
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c')) #crashed
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a') #crashed
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
public:
// inputType, name, outputName, listOption
raw_Container(string _raw_option, string _name, string _outputName, string _listOption, string __narg):
raw_option(convert_type(_raw_option)),
name(_name),
outputName(_outputName),
lOption(_listOption),
_narg(__narg, this -> name){
};
// inputType, name, outputName, listOption
raw_Container(input_types _raw_option,
string _name,
string _outputName,
string _listOption,
string __narg)
: raw_option(_raw_option),
name(_name),
outputName(_outputName),
lOption(_listOption),
_narg(__narg, this -> name){
};
// inputType, name, outputName, listOption
raw_Container(input_types _raw_option, string _name, string _outputName)
: raw_option(_raw_option), name(_name), outputName(_outputName){
};
library(cmdline.arguments)
flags <- c('-f=a','b','c', '--f','d', '--g')
.Call(cmdline.arguments:::argument_locator_test, flags, c('-','--'))
flags <- c('-f','a','b','c', '--f','d', '--g')
.Call(cmdline.arguments:::argument_locator_test, flags, c('-','--'))
flags <- c('-f=','a','b','c', '--f','d', '--g')
.Call(cmdline.arguments:::argument_locator_test, flags, c('-','--'))
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
ptr <- .Call(cmdline.arguments:::narg_create, narg, name)
.Call(cmdline.arguments:::narg_add, ptr, 3)
library(cmdline.arguments)
## Testing raw_Container
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption)
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
ptr
library(cmdline.arguments)
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
ptr
library(cmdline.arguments)
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c'))
ptr
library(cmdline.arguments)
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
ptr
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c'))
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a')
library(cmdline.arguments)
## Testing raw_Container
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c'))
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a')
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
library(cmdline.arguments)
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
# Crashes, and it is hard to see why. It is happening in the initializer.
ptr <- .Call(cmdline.arguments:::create_raw_container, rawOption, name, outputName, listOption, narg)
.Call(cmdline.arguments:::raw_container_add_vector, ptr, c('a', 'b','c'))
.Call(cmdline.arguments:::raw_container_add_string, ptr, 'a')
.Call(cmdline.arguments:::raw_container_extract, ptr) # Works
sourceCpp(code =
"
#include <Rcpp.h>
#include <map>
using namespace Rcpp;
using std::map;
//[[Rcpp::export]]
SEXP mapWrap(){
std::map<int, bool> m;
for(int i = 0; i < 1000; i++){
if(i % 2 == 0)
m[i] = true;
else
m[i] = false;
}
return wrap(m);
}
")
library(Rcpp)
sourceCpp(code =
"
#include <Rcpp.h>
#include <map>
using namespace Rcpp;
using std::map;
//[[Rcpp::export]]
SEXP mapWrap(){
std::map<int, bool> m;
for(int i = 0; i < 1000; i++){
if(i % 2 == 0)
m[i] = true;
else
m[i] = false;
}
return wrap(m);
}
")
mapwwrap()
mapWrap()
names(mapWrap)
names(mapWrap())
library(cmdline.arguments)
## Testing raw_Container
name <- 'test'
outputName <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
metaVar <- 'xxx'
dest = 'test'
## Testing raw_Container
name <- 'test'
outputName <- dest <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
metaVar <- 'xxx'
rawAction <- 'store'
library(cmdline.arguments)
.Call(cmdline.arguments:::create_info,
name,
rawOption,
listOption,
dest,
rawAction,
metaVar,
narg)
sourceCpp(code =
"
#include <Rcpp.h>
#include <map>
using namespace Rcpp;
using std::map;
//[[Rcpp::export]]
SEXP mapWrap(){
std::map<int, bool> m;
for(int i = 0; i < 1000; i++){
if(i % 2 == 0)
m[i] = true;
else
m[i] = false;
}
return wrap(m);
}
")
library(cmdline.arguments)
name <- 'test'
outputName <- dest <- 'testOutput'
rawOption <- 'l'
listOption <- 'v'
narg = '3'
metaVar <- 'xxx'
rawAction <- 'store'
.Call(cmdline.arguments:::create_info,
name,
rawOption,
listOption,
dest,
rawAction,
metaVar,
narg)
is.nan
pryr::show_c_source(.Primitive("is.nan"))
a <- list(1, 2)
names(a) <- c('a', 'a')
a
a['a']
s_g_i <- matrix(c(.95, .05, .2, .8), ncol = 2, byrow = T, dimnames = list(c('i = 0', 'i = 1'), c('s = 0', 's = 1')))
s_g_i
g_g_i_a_d <- matrix(c(.3, .4, .3,
.05, .25, .7,
.9, .08, .02,
.5, .3, .2), dimnames = list(c('i = 0, d = 0', 'i = 0, d = 1', 'i = 1, d = 0', 'i = 1, d = 1'),
c('g = 1', 'g = 2', 'g = 3')))
g_g_i_a_d <- matrix(c(.3, .4, .3,
.05, .25, .7,
.9, .08, .02,
.5, .3, .2),
ncol = 3, byrow = T,
dimnames = list(c('i = 0, d = 0', 'i = 0, d = 1', 'i = 1, d = 0', 'i = 1, d = 1'),
c('g = 1', 'g = 2', 'g = 3')))
g_g_i_a_d
L_g_g <- matrix(c(.1, .9,
.4,. 6,
.99, .01), ncol = 2, byrow = T,
dimnames = list(c('g = 1', 'g = 2', 'g = 3'),
c('L = 0', 'L = 1')))
L_g_g <- matrix(c(.1, .9,
.4, .6,
.99, .01), ncol = 2, byrow = T,
dimnames = list(c('g = 1', 'g = 2', 'g = 3'),
c('L = 0', 'L = 1')))
L_g_g
s_g_i_f <- s_g_i
s_g_i_f * i
d <- c("0" = .6, "1" = .4)
i <- c("0" = 0.7, "1" = .3)
s_g_i_f * i
i
s_g_i_f
0.05 * 0.3
0.95 * 0.3
0.2 * 0.3
s_g_i_f <- s_g_i * i
s_g_i_f
ps <- colsums(s_g_i_f)
ps
ps <- colsum(s_g_i_f)
ps <- colSums(s_g_i_f)
ps
0.8 * 0.3 + 0.05 * 0.7
?sweep
sweep(s_g_i, 1, i, "*")
sweep(s_g_i, 2, i, "*")
s_g_i_f
# Calc p(G)
rep(d, each = 2) * rep(i, 2)
rep(d, each = 2)
# Calc p(G)
rep(d, 2) * rep(i, each = 2)
# Calc p(G)
d_i <- rep(d, 2) * rep(i, each = 2)
g_g_i_a_d_f <- g_g_i_a_d * d_i
g_g_i_a_d_f
sum(g_g_i_a_d_f)
stopifnot(sum(s_g_i_f) == 0)
sum(s_g_i_f)
?stopifnot
sum(s_g_i_f) == 0
stopifnot(sum(s_g_i_f) == 1)
sum(s_g_i_f) == 1
stopifnot(sum(s_g_i_f) - 1 < .Machine$double.eps^0.5)
stopifnot(sum(g_g_i_a_d_f) - 1 < .Machine$double.eps^0.5)
g_g_i_a_d_f
pg <- colSums(g_g_i_a_d_f)
pg
dim(pg)
# Calc p(L)
L_g_g * pg
# Calc p(L)
L_g_g_f <- L_g_g * pg
L_g_g_f
pL <- colSums(L_g_g_f)
pL
stopifnot(sum(L_g_g_f) - 1 < .Machine$double.eps^0.5)
g_g_i_a_d_f
g_g_i_a_d_f_g_I_1 <- g_g_i_a_d_f[3:4, ]
g_g_i_a_d_f_g_I_1 <- g_g_i_a_d_f_g_I_1 / sum(g_g_i_a_d_f_g_I_1)
g_g_i_a_d_f_g_I_1
pg_g_I_1 <- colSums(g_g_i_a_d_f_g_I_1)
L_g_g_a_I_1 <- L_g_g * pg_g_I_1
L_g_g_a_I_1
pL_g_I_1 <- colSums(L_g_g_a_I_1)
pL_g_I_1
0.8 * 0.76772 * 0.3 / (0.275 * 0.502336)
d
i
s_g_i
g_g_i_a_d
L_g_g
s_g_i_f
0.95 * 0.7
0.05 * 0.7
0.2 * 0.7
s_g_i
s_g_i_f
0.2 * 0.3
0.95 * 0.7
0.05 * 0.7
0.2 * 0.3
0.8 * 0.3
s_g_i_f
s_g_i
0.95 * 0.7
0.05 * 0.7
0.2 * 0.3
0.8 * 0.3
d_i
d[0] * i[0]
d[1] * i[1]
d[2] * i[1]
i[2] * d[1]
i[2] * d[2]
g_g_i_a_d
g_g_i_a_d_f
0.3 * 0.6 * 0.7
s_g_i_f["i = 1", ]
s_g_i_f["i = 1", "s = 1"]
L_g_g_a_I_1
pg_g_I_1
g_g_i_a_d_f_g_I_1
L_g_g_a_I_1
pL_g_I_1
s_g_i_f["i = 1", "s = 1"] * pL_g_I_1['L = 1'] * i['1']
ps
s_g_i_f["i = 1", "s = 1"] * pL_g_I_1['L = 1'] * i['1'] / (ps['s = 1'] * pL['L = 1'])
s_g_i_f["i = 1", "s = 1"]
s_g_i_f
s_g_i["i = 1", "s = 1"] * pL_g_I_1['L = 1'] * i['1'] / (ps['s = 1'] * pL['L = 1'])
s_g_i_f
s_g_i
pL_g_I_1
s_g_i
# Res:
s_g_i["i = 1", "s = 1"] * pL_g_I_1['L = 1'] * i['1'] / (ps['s = 1'] * pL['L = 1'])
g_g_i_a_d_f
rep(i, each = 2)
rep(d, 2)
rep(d, 2) * rep(i, each = 2)
pL_g_I_1
g_g_i_a_d
s_g_i
d
g_g_i_a_d
g_g_i_a_d[3:4,]
g_g_i_a_d[3:4,] * i['1'] * d
sum(g_g_i_a_d[3:4,] * i['1'] * d)
g_g_i_a_d[3:4,]
colSums(g_g_i_a_d[3:4,])
g_g_i_a_d
L_g_g
L_g_g * colSums(g_g_i_a_d[3:4,])
sweep(L_g_g, 1, colSums(g_g_i_a_d[3:4,]) '*')
colSums(g_g_i_a_d[3:4,])
L_g_g
sweep(L_g_g, 2, colSums(g_g_i_a_d[3:4,]) '*')
sweep(L_g_g, 2, colSums(g_g_i_a_d[3:4,]), '*')
sweep(L_g_g, 1, colSums(g_g_i_a_d[3:4,]), '*')
colSums(g_g_i_a_d[3:4,])
g_g_i_a_d
g_g_i_a_d[3:4,]
sweep(L_g_g, 1, colSums(g_g_i_a_d[3:4,] * i['1'] * d), '*')
colSums(sweep(L_g_g, 1, colSums(g_g_i_a_d[3:4,] * i['1'] * d), '*'))
(ps['s = 1'] * pL['L = 1'])
ps['s = 1'] * pL['L = 1']
L_g_g
L_g_g[, 'L = 1']
g_g_i_a_d
g_g_i_a_d[3:4, ] * d
d
0.9 * 0.6
0.8 * 0.6
0.02 * 0.6
g_g_i_a_d[3:4, ] * d
g_g_i_a_d[3:4, ] * d * i['1']
L_g_g[, 'L = 1'] *
colSums(g_g_i_a_d[3:4, ] * d * i['1'])
sum(L_g_g[, 'L = 1'] *
colSums(g_g_i_a_d[3:4, ] * d * i['1'])
)
g_g_i_a_d
g_g_i_a_d[3:4,]
colSums(g_g_i_a_d[3:4,])
colSums(g_g_i_a_d[3:4,]) / sum(colSums(g_g_i_a_d[3:4,]))
pg_g_I_1
g_g_i_a_d_f
colSums(g_g_i_a_d_f[3:4, ] )
colSums(g_g_i_a_d_f[3:4, ] ) / sum(colSums(g_g_i_a_d_f[3:4, ] ))
g_g_i_a_d_f_g_I_1
pg_g_I_1
pL_g_I_1
sum(L_g_g[, 'L = 1'] *
colSums(g_g_i_a_d[3:4, ] * d * i['1'])
)
0.76772  /
sum(L_g_g[, 'L = 1'] *
colSums(g_g_i_a_d[3:4, ] * d * i['1'])
)
g_g_i_a_d
L_g_g
0.3 * (0.9 * 0.9 * 0.6 + 0.9 * 0.5 * 0.4 + 0.6 * 0.08 * 0.6 + 0.6 * 0.3 * 0.4 + 0.01 * 0.02 * 0.6 + 0.01 * 0.2 * 0.4)
0.8 * 0.230316 * 0.3 / ( 0.275 * 0.502336)
pL_g_I_1
ps
0.275 * 0.767
(.9+.6+.01)/3
(.9+.6+.01)/3 * (.5 + .8) / 2
g_g_i_a_d
L_g_g
g_g_i_a_d
d
s1 <- 0.3 ^2
s2 <- c(.9, .6, .01)
s3 <- matrix(c(.9, .5, .08, .3, .02, .2), ncol = 2, byrow = T)
s4 <- c(.6, .4)
s5 <- .8
s2 * s3
s2 * s3 * t(s4)
s2 * s3 %*% s4
s1 * s2 * s3 %*% s4 * s5
sum(s1 * s2 * s3 %*% s4 * s5)
s3
s3 %*% s4
sum(s1 * s2 * (s3 %*% s4) * s5)

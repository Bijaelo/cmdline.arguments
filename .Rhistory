?writeClipboard
as.character(dput(mdf))
writeClipboard(as.character(dput(mdf)))
c("AC", "ACCELSA", "ACTINVR", "AEROMEX", "AGRIEXP", "AGUA", "AHMSA", "ALEATIC", "ALFA", "ALPEK", "ALSEA", "AMX", "ANB", "ARA", "ARISTOS", "ASUR", "AUTLAN", "AXTEL", "AZTECA", "BACHOCO", "BAFAR", "BBAJIO", "BBVA", "BEVIDES", "BIMBO", "BOLSA", "BSMX", "CABLE", "CADU", "CEMEX", "CERAMIC", "CHDRAUI", "CIDMEGA", "CIE", "CMOCTEZ", "CMR", "COLLADO", "CONVER", "CREAL", "CUERVO", "CULTIBA", "CYDSASA", "DINE", "EDOARDO", "ELEKTRA", "ELEMENT", "FEMSA", "FINAMEX", "FINDEP", "FRAGUA", "FRES", "GAP", "GAV", "GBM",
"GCARSO", "GCC", "GENSEG", "GENTERA", "GEO", "GFAMSA", "GFINBUR", "GFMULTI", "GFNORTE", "GICSA", "GIGANTE", "GISSA", "GMD", "GMEXICO", "GMXT", "GNP", "GOMO", "GPH", "GPROFUT", "GRUMA", "GSANBOR", "HCITY", "HERDEZ", "HIMEXSA", "HOMEX", "HOTEL", "IASASA", "ICA", "ICH", "IDEAL", "IENOVA", "INGEAL", "INVEX", "JAVER", "KIMBER", "KOF", "KUO", "LAB", "LACOMER", "LALA", "LAMOSA", "LASEG", "LIVEPOL", "MAXCOM", "MEDICA", "MEGA", "MFRISCO", "MINSA", "MONEX", "NEMAK", "NMK", "OMA", "ORBIA", "PAPPEL", "PASA",
"PE&OLES", "PINFRA", "PLANI", "POCHTEC", "POSADAS", "PROCORP", "PV", "Q", "QBINDUS", "QUMMA", "R", "RCENTRO", "RLH", "SAN", "SARE", "SAVIA", "SIMEC", "SITES", "SORIANA", "SPORT", "TEAK", "TEKCHEM", "TLEVISA", "TMM", "TRAXION", "TS", "UNIFIN", "URBI", "VALUEGF", "VASCONI", "VESTA", "VINTE", "VISTA", "VITRO", "VOLAR", "WALMEX")
c("ARCA CONTINENTAL, S.A.B. DE C.V.", "ACCEL, S.A.B. DE C.V.", "CORPORACION ACTINVER, S.A.B. DE C.V.", "GRUPO AEROMÉXICO, S.A.B. DE C.V.", "AGRO INDUSTRIAL EXPORTADORA, S.A. DE C.V.", "GRUPO ROTOPLAS, S.A.B. DE C.V.", "ALTOS HORNOS DE MEXICO, S.A. DE C.V.", "ALEATICA, S.A.B. DE C.V.", "ALFA, S.A.B. DE C.V.", "ALPEK, S.A.B. DE C.V.", "ALSEA, S.A.B. DE C.V.", "AMERICA MOVIL, S.A.B. DE C.V.", "ANHEUSER-BUSCH INBEV SA/NV", "CONSORCIO ARA, S.A.B. DE C.V.", "CONSORCIO ARISTOS, S.A.B. DE C.V.", "GRUPO AEROPORTUARIO DEL SURESTE, S.A.B. DE C.V.",
"COMPAÑIA MINERA AUTLAN, S.A.B. DE C. V.", "AXTEL, S.A.B. DE C.V.", "TV AZTECA, S.A.B. DE C.V.", "INDUSTRIAS BACHOCO, S.A.B. DE C.V.", "GRUPO BAFAR, S.A.B. DE C.V.", "BANCO DEL BAJÍO, S.A., INSTITUCIÓN DE BANCA MÚLTIPLE", "BANCO BILBAO VIZCAYA ARGENTARIA, S.A.", "FARMACIAS BENAVIDES, S.A.B. DE C.V.", "GRUPO BIMBO, S.A.B. DE C.V.", "BOLSA MEXICANA DE VALORES, S.A.B. DE C.V.", "BANCO SANTANDER MEXICO, S.A., INSTITUCION DE BANCA MULTIPLE, GRUPO FINANCIERO SANTANDER", "EMPRESAS CABLEVISION, S.A. DE C.V.",
"CORPOVAEL S.A.B. DE C.V.", "CEMEX, S.A.B. DE C.V.", "INTERNACIONAL DE CERAMICA, S.A.B. DE C.V.", "GRUPO COMERCIAL CHEDRAUI, S.A.B. DE C.V.", "GRUPE, S.A.B. DE C.V.", "CORPORACION INTERAMERICANA DE ENTRETENIMIENTO, S.A.B. DE C.V.", "CORPORACION MOCTEZUMA, S.A.B. DE C.V.", "CMR, S.A.B. DE C.V.", "G COLLADO, S.A.B. DE C.V.", "CONVERTIDORA INDUSTRIAL, S.A.B. DE C.V.", "CREDITO REAL, S.A.B. DE C.V., SOFOM, E.R.", "BECLE, S.A.B. DE C.V.", "ORGANIZACIÓN CULTIBA, S.A.B. DE CV", "CYDSA, S.A.B. DE C.V.",
"DINE, S.A.B. DE C.V.", "EDOARDOS MARTIN, S.A.B. DE C.V.", "GRUPO ELEKTRA, S.A.B. DE C.V.", "ELEMENTIA, S.A.B. DE C.V.", "FOMENTO ECONÓMICO MEXICANO, S.A.B. DE C.V.", "CASA DE BOLSA FINAMEX, S.A.B. DE C.V.", "FINANCIERA INDEPENDENCIA, S.A.B. DE C.V. SOFOM, E.N.R.", "CORPORATIVO FRAGUA, S.A.B. DE C.V.", "FRESNILLO PLC", "GRUPO AEROPORTUARIO DEL PACIFICO, S.A.B. DE C.V.", "ACOSTA VERDE, S.A.B. DE C.V.", "CORPORATIVO GBM, S.A.B. DE C. V.", "GRUPO CARSO, S.A.B. DE C.V.", "GRUPO CEMENTOS DE CHIHUAHUA, S.A.B. DE C.V.",
"GENERAL DE SEGUROS, S.A.B.", "GENTERA, S.A.B. DE C.V.", "CORPORACION GEO, S.A.B. DE C.V.", "GRUPO FAMSA, S.A.B. DE C.V.", "GRUPO FINANCIERO INBURSA, S.A.B. DE C.V.", "GRUPO FINANCIERO MULTIVA S.A.B. DE C.V.", "GRUPO FINANCIERO BANORTE, S.A.B DE C.V.", "GRUPO GICSA, S.A.B. DE C.V.", "GRUPO GIGANTE, S.A.B. DE C.V.", "GRUPO INDUSTRIAL SALTILLO, S.A.B. DE C.V.", "GRUPO MEXICANO DE DESARROLLO, S.A.B.", "GRUPO MEXICO, S.A.B. DE C.V.", "GMÉXICO TRANSPORTES, S.A.B. DE C.V.", "GRUPO NACIONAL PROVINCIAL, S.A.B.",
"GRUPO COMERCIAL GOMO, S.A. DE C.V.", "GRUPO PALACIO DE HIERRO, S.A.B. DE C.V.", "GRUPO PROFUTURO, S.A.B. DE C.V.", "GRUMA, S.A.B. DE C.V.", "GRUPO SANBORNS, S.A.B. DE C.V.", "HOTELES CITY EXPRESS, S.A.B. DE C.V.", "GRUPO HERDEZ, S.A.B. DE C.V.", "HIMEXSA, S.A.B. DE C.V.", "DESARROLLADORA HOMEX, S.A.B. DE C.V.", "GRUPO HOTELERO SANTA FE, S.A.B. DE C.V.", "INDUSTRIA AUTOMOTRIZ, S.A. DE C.V.", "EMPRESAS ICA, S.A.B. DE C.V.", "INDUSTRIAS CH, S.A.B. DE C.V.", "IMPULSORA DEL DESARROLLO Y EL EMPLEO EN AMERICA LATINA, S.A.B. DE C.V.",
"INFRAESTRUCTURA ENERGETICA NOVA, S.A.B. DE C.V.", "INGEAL, S.A.B. DE C.V.", "INVEX CONTROLADORA, S.A.B. DE C.V.", "SERVICIOS CORPORATIVOS JAVER, S.A.B. DE C.V.", "KIMBERLY - CLARK DE MEXICO S.A.B. DE C.V.", "COCA-COLA FEMSA, S.A.B. DE C.V.", "GRUPO KUO, S.A.B. DE C.V.", "GENOMMA LAB INTERNACIONAL, S.A.B. DE C.V.", "LA COMER S.A.B. DE C.V.", "GRUPO LALA, S.A.B. DE C.V.", "GRUPO LAMOSA, S.A.B. DE C.V.", "LA LATINOAMERICANA SEGUROS, S.A.", "EL PUERTO DE LIVERPOOL, S.A.B. DE C.V.", "MAXCOM TELECOMUNICACIONES, S.A.B. DE C.V.",
"MEDICA SUR, S.A.B. DE C.V.", "MEGACABLE HOLDINGS, S.A.B. DE C.V.", "MINERA FRISCO, S.A.B. DE C.V.", "GRUPO MINSA, S.A.B. DE C.V.", "MONEX, S.A.B. DE C.V.", "NEMAK, S.A.B. DE C.V.", "CONTROLADORA NEMAK, S.A.B. DE C.V.", "GRUPO AEROPORTUARIO DEL CENTRO NORTE, S.A.B. DE C.V.", "ORBIA ADVANCE CORPORATION, S.A.B. DE C.V.", "BIO PAPPEL, S.A.B. DE C.V.", "PROMOTORA AMBIENTAL, S.A.B. DE C.V.", "INDUSTRIAS PEÑOLES, S. A.B. DE C. V.", "PROMOTORA Y OPERADORA DE INFRAESTRUCTURA, S.A.B. DE C.V.", "PLANIGRUPO LATAM, S.A.B. DE C.V.",
"GRUPO POCHTECA, S.A.B. DE C.V.", "GRUPO POSADAS, S.A.B. DE C.V.", "PROCORP, S.A.B. DE C.V.", "PEÑA VERDE S.A.B.", "QUÁLITAS CONTROLADORA, S.A.B. DE C.V.", "Q.B. INDUSTRIAS, S.A. DE C.V.", "GRUPO QUMMA, S.A. DE C.V.", "REGIONAL, S.A.B. DE C.V.", "GRUPO RADIO CENTRO, S.A.B. DE C.V.", "RLH PROPERTIES, S.A.B. DE C.V.", "BANCO SANTANDER, S.A.", "SARE HOLDING, S.A.B. DE C.V.", "SAVIA, S.A. DE C.V.", "GRUPO SIMEC, S.A.B. DE C.V.", "TELESITES, S.A.B. DE C.V.", "ORGANIZACION SORIANA, S.A.B. DE C.V.", "GRUPO SPORTS WORLD, S.A.B. DE C.V.",
"PROTEAK UNO, S.A.B. DE C.V.", "TEKCHEM, S.A.B. DE C.V.", "GRUPO TELEVISA, S.A.B.", "GRUPO TMM, S.A.", "GRUPO TRAXIÓN S.A.B DE C.V.", "TENARIS S.A.", "UNIFIN FINANCIERA, S.A.B. DE C.V.", "URBI DESARROLLOS URBANOS, S.A.B. DE C.V.", "VALUE GRUPO FINANCIERO, S.A.B. DE C.V.", "GRUPO VASCONIA S.A.B.", "CORPORACIÓN INMOBILIARIA VESTA, S.A.B. DE C.V.", "VINTE VIVIENDAS INTEGRALES, S.A.B. DE C.V.", "VISTA OIL & GAS, S.A.B. DE C.V.", "VITRO, S.A.B. DE C.V.", "CONTROLADORA VUELA COMPAÑÍA DE AVIACIÓN, S.A.B. DE C.V.",
"WAL - MART DE MEXICO, S.A.B. DE C.V.")
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 1, 143, 144, 145)
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0)
c(0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0)
c(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0)
c(1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0)
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0)
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
dput(mdf)
mdf
head(mdf)
table(mdf$SECTOR
)
mdf$SECTOR[mdf$Energía==1]==1
mdf$SECTOR[mdf$Industria==1]==2
mdf$SECTOR[mdf$Materiales==1]==3
with(mdf, table(Energía, Industria))
mdf
head(mdf)
table(rowSums(mdf[, -(1:3)]))
?pmatch
pmatch(rep(1, nrow(mdf)), mdf[, -c(1:3)])
?match
table(rowSums(mdf[, -c(1:3)]))
unique(rowSums(mdf[, -c(1:3)]))
mdf[, -(1:3)] * 1:6
?sweep
sweep(mdf[, -(1:3)], 1, 1:6, '*')
dim(mdf[, -(1:6)])
head(mdf[,-(1:3)])
mdf[, -(1:3)] * 1:10
sweep(mdf[, -(1:3)], 1, 1:10, *)
sweep(mdf[, -(1:3)], 1, 1:10, '*')
sweep(mdf[, -(1:3)], 2, 1:10, '*')
apply(mdf[, -(1:3)], which)
apply(mdf[, -(1:3)], 1, which)
apply(mdf[, -(1:3)], 1, function(x)which(x == 1))
1:10 * mdf[, -(1:3)]
apply(mdf[, -(1:3)], 1, function(x)which(x == 1))
names(mdf)
mdf[, -(1:3)] * matrix(1:10, ncol = 10, nrow = nrow(mdf), byrow = TRUE)
rowSums(mdf[, -(1:3)] * matrix(1:10, ncol = 10, nrow = nrow(mdf), byrow = TRUE))
(1:10)[as.logical(mdf[, -(1:3)])]
(1:10)[as.logical(as.matrix(mdf[, -(1:3)]))]
as.logical(as.matrix(mdf[, -(1:3)]))
as.matrix(mdf[, -(1:3)]) == 1
(1:10)as.matrix(mdf[, -(1:3)]) == 1
(1:10)[as.matrix(mdf[, -(1:3)]) == 1]
1:10 * as.matrix(mdf[, -(1:3)]) == 1
1:10 * (as.matrix(mdf[, -(1:3)]) == 1)
rm(list=ls())
library(cmdline.arguments)
sourceCpp(code =
"
// [[Rcpp::depends(cmdline.arguments)]]
#include <Rcpp.h>
#include <cmd_args.h>
// [[Rcpp::export]]
SEXP test(SEXP x){
return wrap(cmd_args::hello_world(x));
}
")
library(Rcpp)
library(cmdline.arguments)
sourceCpp(code =
"
// [[Rcpp::depends(cmdline.arguments)]]
#include <Rcpp.h>
#include <cmd_args.h>
// [[Rcpp::export]]
SEXP test(SEXP x){
return wrap(cmd_args::hello_world(x));
}
")
test(1:10)
install.packages('tinytest')
out <- run_test_dir(system.file("tinytest", package="tinytest"), verbose=0)
library(tinytest)
out <- run_test_dir(system.file("tinytest", package="tinytest"), verbose=0)
out
head(as.data.frame(out), 3)
summary(out)
?build_install_test
?test_all
ignore
?exit_file
exit_file
?Sys.setenv
?at_home
at_home()
at_home
Sys.getenv("TT_AT_HOME")
?tinytest::test_package
getOption("Ncpus", 1)
getwd()
?setup_tinytest("/path/to/your/package")
setup_tinytest(".")
setup_tinytest
read.dcf
read.dcf(DESCRIPTION)
read.dcf("DESCRIPTION")
class(read.dcf("DESCRIPTION"))
dim(read.dcf("DESCRIPTION"))
read.dcf("DESCRIPTION")['Suggests']
read.dcf("DESCRIPTION")[,'Suggests']
?using
using
eval(x <- 3)
x
?eval
parent.frame()
f <- function(x)parent.frame()
f()
?with
with
with.default
with(mtcars, cyl <- rep(1, length(cyl)))
mtcars
mtcars$cyl
?optim
?locale
?locales
sessionInfo()
?scal
?scan
basename(file.path(getwd("hello.csv")))
basename(file.path(getwd(), "hello.csv"))
½getwd()
getwd()
?basename
x <- abc.sas7bdat
x <- 'abc.sas7bdat'
gsub('\\.sas7bdat^', '', x)
gsub('\\.sas7bdat$', '', x)
?boxplot
sourceCpp(code =
"
// [[Rcpp::depends(cmdline.arguments)]]
#include <Rcpp.h>
#include <cmd_args.h>
#include <
// [[Rcpp::register]]
SEXP test(SEXP x){
return wrap(cmd_args::hello_world(x));
}
")
library(Rcpp)
library(cmdline.arguments)
sourceCpp(code =
"
// [[Rcpp::depends(cmdline.arguments)]]
#include <Rcpp.h>
#include <cmd_args.h>
// [[Rcpp::register]]
SEXP test(SEXP x){
return wrap(cmd_args::hello_world(x));
}
")
id <- c(1:10)
members <- c("male", "male", "female", "male", "female", "male", "children", "cousin", "female", "male")
household <- data.frame(id, members)
library(dplyr)
married_couples <- household %>%
filter(members == "male", lead(members) =="female" )
married_couples
married_couples <- household %>%
filter(members == "male" &  lead(members) =="female" )
married_couples
rep(1, 10)
pryr::sexp_type(LETTERS)
sample(3)
lapply(1:3, sample)
lapply(1:3, seq.int)
mtcars == 999
(mtcars == 999) * mtcars
(mtcars != 999) * mtcars
df[mtcars == 999]
df[mtcars == 999,]
as.matrix(df)[mtcars == 999]
mtcars[mtcars == 999,]
mtcars[mtcars == 999]
as.matrix(mtcars)[mtcars == 999]
as.matrix(mtcars)[mtcars == 999,]
as.matrix(mtcars)[which(as.vector(mtcars == 999))]
as.matrix(mtcars)[which(as.vector(mtcars != 999))]
as.matrix(mtcars)[mtcars != 999]
as.matrix(mtcars)[which(mtcars != 999)]
which(mtcars != 999)
mtcars[which(mtcars != 999)]
mtcars[which(mtcars != 999),]
is.na(mtcars)
class(mtcars)
dataframes <- replicate(10, as.data.frame(replicate(20, rnorm(100))))
dta.frames
dataframes
class(dataframes)
lapply(frames, print)
lapply(dataframes, print)
dim(datafrmes)
dim(dataframes)
as.data.frame(replicate(20, rnorm(100))
)
as.data.frame(replicate(20, rnorm(100)))
dim(as.data.frame(replicate(20, rnorm(100))))
datafrmes[[1]]
dataframes[[1]]
dataframes[,1]
class(dataframes)
replicate(10, as.data.frame(replicate(20, rnorm(100))), simplify = FALSE)
dataframes <- replicate(10, as.data.frame(replicate(20, rnorm(100))), simplify = FALSE)
dataframes
dataframes[[1]]
cor(dataframes[[1]]$V1, dataframes[[1]][-1])
lapply(dataframes, # <=== name corrected
function(x){
cor(x[,1]$V1, x[-c(1:1)])
return(x)
}
)
lapply(dataframes, # <=== name corrected
function(x){
cor(x$V1, x[-1]) # no need to subset x before `$V1`
return(x)
}
)
cor(dataframes[[1]]$V1, dataframes[[1]][-1])
lapply(dataframes, # <=== name corrected
function(x){
cor(x$V1, x[-1]) # no need to subset x before `$V1`
# return(x) # <== Remove return x
}
)
rm(list=ls())
all.equal(1:3, c(1, 2, 3))
pryr:::typename('EXTPTRSXP')
sourceCpp(code =
"
class A{};
#include <Rcpp.h>
// [[Rcpp::export]]
Rcpp::XPtr<A> returnA(){
XPtr<A> xp(new A());
return xp;
}
")
sourceCpp(code =
"
class A{};
#include <Rcpp.h>
// [[Rcpp::export]]
Rcpp::XPtr<A> returnA(){
Rcpp::XPtr<A> xp(new A());
return xp;
}
")
class(returnA())
do.call(rep, list(1, 30))
do.call(lm, list(formula = mpg ~ hp, data = mtcars))
summary(do.call(lm, list(formula = mpg ~ hp, data = mtcars)))
library(cmdline.arguments)
tinytest::build_install_test()
library(cmdline.arguments)
tinytest::build_install_test()
?sourceCpp
tinytest::build_install_test()
getwd()
setwd('inst/tinytest')
sourceCpp('cpp/options.cpp')
library(Rcpp)
sourceCpp('cpp/options.cpp')
setwd('inst/tinytest')
sourceCpp('cpp/options.cpp')
library(cmdline.arguments)
library(Rcpp)
sourceCpp('cpp/options.cpp')
library(cmdline.arguments)
sourceCpp('cpp/options.cpp')
getwd()
setwd('C:/Users/olive/Git_repos/cmdline.arguments/inst/tinytest')
sourceCpp('cpp/options.cpp')
library(cmdline.arguments)
sourceCpp('cpp/options.cpp')
library(cmdline.arguments)
sourceCpp('cpp/options.cpp')
library(cmdline.arguments)
sourceCpp('cpp/options.cpp')
sourceCpp('cpp/pairlist.cpp')
sourceCpp('cpp/sugar.cpp')
setwd('inst/tinytest')
# Test for <cmd_args/utils/converters.h>
Rcpp::sourceCpp('cpp/options.cpp')
Rcpp::sourceCpp("cpp/pairlist.cpp")
library(Rcpp)
Rcpp::sourceCpp("cpp/pairlist.cpp")
library(cmdline.arguments)
setwd('inst/tinytet')
setwd('inst/tinytest')
Rcpp::sourceCpp("cpp/pairlist.cpp")
expect_equal(test_pairlist(list(1, 30), rep), do.call(rep, list(1, 30)))
library(tinytest)
expect_equal(test_pairlist(list(1, 30), rep), do.call(rep, list(1, 30)))
expect_identical(test_pairlist(list(formula = mpg ~ hp, data = mtcars), lm),
do.call(lm, list(formula = mpg ~ hp, data = mtcars)))
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::source("cpp/sugar.cpp")
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
library(cmdline.arguments)
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
sourceCpp(code =
"
// [[Rcpp::plugins(\"cpp2a\")]]
#include <Rcpp.h>;
using namespace Rcpp;
void testStuff(NUmericVector x, NumericVector table){
auto xx = in(x, table);
auto xxx = match(x, table);
}
")
sourceCpp(code =
"
// [[Rcpp::plugins(\"cpp2a\")]]
#include <Rcpp.h>;
using namespace Rcpp;
void testStuff(NumericVector x, NumericVector table){
auto xx = in(x, table);
auto xxx = match(x, table);
}
")
sourceCpp(code =
"
// [[Rcpp::plugins(\"cpp2a\")]]
#include <Rcpp.h>;
using namespace Rcpp;
// [[Rcpp::export]]
void testStuff(NumericVector x, NumericVector table){
auto xx = in(x, table);
auto xxx = match(x, table);
}
")
testStuff(1:3, 1:6)
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
rstudioapi::restartSession()
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
sourceCpp(code =
"
// [[Rcpp::plugins(\"cpp2a\")]]
#include <Rcpp.h>;
using namespace Rcpp;
// [[Rcpp::export]]
void testStuff(const SEXP& x, const SEXP& table){
Rcout << is_true(any(duplicated(Vector<REALSXP>(x)))) ? 1 << 0 << '\\n';
}
")
sourceCpp(code =
"
// [[Rcpp::plugins(\"cpp2a\")]]
#include <Rcpp.h>;
using namespace Rcpp;
// [[Rcpp::export]]
void testStuff(const SEXP& x, const SEXP& table){
Rcout << (is_true(any(duplicated(Vector<REALSXP>(x)))) ? 1 : 0) << '\\n';
}
")
testStuff(1:10)
testStuff(1:10, 1:3)
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
rstudioapi::restartSession()
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
sourceCpp(code =
"
// [[Rcpp::plugins(\"cpp2a\")]]
#include <Rcpp.h>;
using namespace Rcpp;
inline bool allin(const SEXP& x, const SEXP& table){
if(TYPEOF(x) != TYPEOF(table))
stop(\"x and table must be of the same type.\");
switch(TYPEOF(x)){
case INTSXP:
return is_true(all(Rcpp::in(Vector<INTSXP>(x), Vector<INTSXP>(table))));
case REALSXP:
return is_true(all(Rcpp::in(Vector<REALSXP>(x), Vector<REALSXP>(table))));
case STRSXP:
return is_true(all(Rcpp::in(Vector<STRSXP>(x), Vector<STRSXP>(table))));
default:
stop(\"Invalid type in cmd_args::allin [Type = %s, valid = (%s, %s, %s)]\",
Rf_type2char(TYPEOF(x)),
Rf_type2char(INTSXP),
Rf_type2char(REALSXP),
Rf_type2char(STRSXP));
}
// [[Rcpp::export]]
void testStuff(const SEXP& x, const SEXP& table){
Rcout << allin(x, table) << '\\n';
}
")
testStuff(1:10, 1:6)
sourceCpp('C:/Users/olive/desktop/test.cpp')
sessionInfo()
library(Rcpp)
sourceCpp('C:/Users/olive/desktop/test.cpp')
sessonInfo()
sessionInfo()
setwd('inst/tinytest')
Rcpp::sourceCpp("cpp/pairlist.cpp")
expect_equal(test_pairlist(list(1, 30), rep), do.call(rep, list(1, 30)))
library(tinytest)
expect_equal(test_pairlist(list(1, 30), rep), do.call(rep, list(1, 30)))
expect_identical(test_pairlist(list(formula = mpg ~ hp, data = mtcars), lm),
do.call(lm, list(formula = mpg ~ hp, data = mtcars)))
# TinyTest for <cmd_args/utils/sugar.h>
Rcpp::sourceCpp("cpp/sugar.cpp")
## Any duplicated
x <- 1:10
expect_false(anyDuplicated_NumericVector(x))
expect_false(anyDuplicated_SEXP(x))
x <- rep(1, 10)
expect_true(anyDuplicated_NumericVector(x))
expect_true(anyDuplicated_SEXP(x))
expect_false(anyDuplicated_SEXP(LETTERS))
expect_true(anyDuplicated_SEXP('LETTERS'))
strsplit('LETTERS')
?strsplit
?stringsplit
strsplit(x, "e")
strsplit('LETTERS', 'LETTERS')
split('LETTERS')
strsplit('LETTERS', '')
expect_true(anyDuplicated_SEXP(strsplit('LETTERS', '')[[1]]))
## allin
x <- 1:3
table <- 1:120
expect_true(allin_NumericNumeric(x, table))
expect_error(allin_NumericInteger(x, table))
expect_true(allin_SEXPSEXP(x, table))
allin_NumericInteger(x, table)
table
expect_error(allin_SEXPSEXP(as.integer(x), as.double(table)))
expect_true(allin_SEXPSEXP(x, table))
expect_false(allin_SEXPSEXP(1:150, table))
rm(x, table)
## samelengths
expect_true(samelegths_NumericVector(1:10))
## samelengths
expect_true(samelengths_NumericVector(1:10))
expect_true(samelengths_SEXP(lapply(1:3, function(x)seq.int(3))))
expect_false(samelengths_SEXP(lapply(1:3, seq.int)))
expect_true(test_is_StringOrChar(letters))
test_is_StringOrChar(letters)
letters
expect_true(test_is_StringOrChar('letters'))
expect_false(test_is_StringOrChar(list()))
expect_false(test_is_StringOrChar(list))
expect_false(test_is_StringOrChar(1:10))
# is_StringOrCharAndNotNA
expect_true(test_test_is_StringOrCharAndNotNA(letters))
# is_StringOrCharAndNotNA
expect_true(test_is_StringOrCharAndNotNA(letters))
expect_false(test_is_StringOrCharAndNotNA(list()))
# is_StringOrCharAndNotNA
expect_true(test_is_StringOrCharAndNotNA('letters'))
expect_false(test_is_StringOrCharAndNotNA(list()))
expect_false(test_is_StringOrCharAndNotNA(list))
expect_false(test_is_StringOrCharAndNotNA(1:10))
x <- letters
x[19] <- NA
expect_true(test_is_StringOrCharAndNotNA(x))
expect_false(test_is_StringOrCharAndNotNA(x))
rm(x)
# sexp_isnull
expect_true(sexp_isnull(NULL))
expect_false(sexp_isnull(1:3))
library(Rcpp)
sourceCpp('C:/Users/olive/Desktop/test.cpp')
x <- 1:6
table <- 1:20
identical(all(x %in% table), allin(x, table))
all(x %in% table)
allin(x, table)
testStuff(x, table)
library(cmdline.arguments)
build_and_test()
tinytest::build_and_test()
library(tinytest)
build_install_test()
getwd()

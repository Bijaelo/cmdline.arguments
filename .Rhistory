x = 1.5,
y=seq(0.75-.35,0.68-.3, length = 4),
label = labelp4w$label,
size = 7.5, parse = T) +
scale_y_continuous(breaks = seq(0.2, 0.45, by = 0.1),limits = (c(0.2, 0.45))) +
labs(x = "")
ggplot(data = DF, aes(x=SleepDeprivation, y=FA)) +
facet_grid(cols = vars(ROI),  rows = vars(Age),
labeller = as_labeller(c("Younger"  = "Younger Adults",
"Older"    = "Older Adults",
"title" ="title")))+
geom_violin(lwd = 1, alpha = 0.5, trim=F, aes(fill = Age)) +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=wes_palette(n=2, name="GrandBudapest2")) +
geom_text(data = labelp4w,
x = 1.5,
y=seq(0.75-.35,0.68-.35, length = 4),
label = labelp4w$label,
size = 7.5, parse = T) +
scale_y_continuous(breaks = seq(0.2, 0.45, by = 0.1),limits = (c(0.2, 0.45))) +
labs(x = "")
labelp4w
labelp4w <- data.frame(
label = c(c(paste0('atop(~italic(t)[Student](15.95) == -0.93)'),
paste0("italic(p) == 0.36")),
c(paste0('atop(italic(t)[Student](30.15) == 0.51)'),
paste0("italic(p) == 0.61"))),
Age   = factor((c("Younger", "Younger"),
c("Older","Older")), levels = 'Younger', 'Older'))
labelp4w <- data.frame(
label = c(c(paste0('atop(~italic(t)[Student](15.95) == -0.93)'),
paste0("italic(p) == 0.36")),
c(paste0('atop(italic(t)[Student](30.15) == 0.51)'),
paste0("italic(p) == 0.61"))),
Age   = factor((c("Younger", "Younger",
"Older","Older")), levels = 'Younger', 'Older'))
ggplot(data = DF, aes(x=SleepDeprivation, y=FA)) +
facet_grid(cols = vars(ROI),  rows = vars(Age),
laeller = as_labeller(c("Younger"  = "Younger Adults",
"Older"    = "Older Adults",
"title" ="title")))+
geom_violin(lwd = 1, alpha = 0.5, trim=F, aes(fill = Age)) +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=wes_palette(n=2, name="GrandBudapest2")) +
geom_text(data = labelp4w,
x = 1.5,
y=seq(0.75-.35,0.68-.35, length = 4),
label = labelp4w$label,
size = 7.5, parse = T) +
scale_y_continuous(breaks = seq(0.2, 0.45, by = 0.1),limits = (c(0.2, 0.45))) +
labs(x = "")
labelp4w <- data.frame(
label = c(c(paste0('atop(~italic(t)[Student](15.95) == -0.93)'),
paste0("italic(p) == 0.36")),
c(paste0('atop(italic(t)[Student](30.15) == 0.51)'),
paste0("italic(p) == 0.61"))),
Age   = factor(c("Younger", "Younger", "Older", "Older"), levels = 'Younger', 'Older'))
ggplot(data = DF, aes(x=SleepDeprivation, y=FA)) +
facet_grid(cols = vars(ROI),  rows = vars(Age),
labeller = as_labeller(c("Younger"  = "Younger Adults",
"Older"    = "Older Adults",
"title" ="title")))+
geom_violin(lwd = 1, alpha = 0.5, trim=F, aes(fill = Age)) +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=wes_palette(n=2, name="GrandBudapest2")) +
geom_text(data = labelp4w,
x = 1.5,
y=seq(0.75-.35,0.68-.3, length = 4),
label = labelp4w$label,
size = 7.5, parse = T) +
scale_y_continuous(breaks = seq(0.2, 0.45, by = 0.1),limits = (c(0.2, 0.45))) +
labs(x = "")
labelp4w <- data.frame(
label = c(c(paste0('atop(~italic(t)[Student](15.95) == -0.93)'),
paste0("italic(p) == 0.36")),
c(paste0('atop(italic(t)[Student](30.15) == 0.51)'),
paste0("italic(p) == 0.61"))),
Age   = factor(c("Younger", "Younger", "Older", "Older"), levels = c("Younger", "Older")))
ggplot(data = DF, aes(x=SleepDeprivation, y=FA)) +
facet_grid(cols = vars(ROI),  rows = vars(Age),
labeller = as_labeller(c("Younger"  = "Younger Adults",
"Older"    = "Older Adults",
"title" ="title")))+
geom_violin(lwd = 1, alpha = 0.5, trim=F, aes(fill = Age)) +
geom_boxplot(width = 0.1) +
scale_fill_manual(values=wes_palette(n=2, name="GrandBudapest2")) +
geom_text(data = labelp4w,
x = 1.5,
y=seq(0.75-.35,0.68-.3, length = 4),
label = labelp4w$label,
size = 7.5, parse = T) +
scale_y_continuous(breaks = seq(0.2, 0.45, by = 0.1),limits = (c(0.2, 0.45))) +
labs(x = "")
set.seed(3758)
test.x <- rnorm(1000)
test.x <- sort(test.x)
test.x <- test.x[- seq(length(test.x), length.out = 30)]
test.x <- test.x[- (1:30)]
ord <- order(test.x)[-(1:30)]
test.x <- test.x[ord]
orig_ord <- test.x[order(ord)]
orig_ord
set.seed(3758)
test.x <- rnorm(10)
test.x
test.x <- sample(10)
test.x
ord <- order(test.x)[-(1:2)]
ord
test.x <- test.x[ord]
orig_ord <- test.x[order(ord)]
orig_ord
ord
test.x <- sample(10)
ord <- order(test.x)
ord
test.x <- test.x[ord]
test.x
set.seed(3758)
test.x <- sample(10)
ord <- order(test.x)
ordered.x <-test.x[ord]
sub.orig.x <- ordered.x[order(ord)]
sub.orig.x
test.x
set.seed(3758)
test.x <- sample(10)
ord <- order(test.x)[-(1:2)]
ordered.x <-test.x[ord]
sub.orig.x <- ordered.x[order(ord)]
sub.orig.x
test.x
all.equal(test.x[-(1:2)], sub.orig.x)
library(cmdline.arguments)
getwd()
setwd('inst/tinytest')
library(cmdline.argumetns)
library(cmdline.arguments)
libary(tinytest)
library(tinytest)
Rcpp::sourceCpp("cpp/locator.cpp")
# Other case, weird flags supplied
case2 <-
list(args = c('@f', '@@fool', 'abc', 'dfd', 'cc', '-g', 'ad', '3', '4', '--fool', '44', '/h'),
flags = c('@', '@@', '-', '/', '--'))
# Simple case no weirdness, except for the '--fool=34' to test if equal signs work as expected
case1 <-
list(args = c('-f', '--fool=34', 'abc', 'dfd', 'cc', '--good', 'ad', '3', '4', '--fool', '44', '-h'),
flags = c('-', '--'))
# case with positionals
case3 <-
list(args = c('a', 'c', 'b', '-f', '--fool', 'abc', 'dfd', 'cc', '--good', 'ad', '3', '4', '--fool', '44', '-h'),
flags = c('-', '--'))
XPtr1 <- test_initializer(case1[['args']], case1[['flags']])
expect_inherits(XPtr1, 'externalptr')
XPtr2 <- test_initializer(case2[['args']], case2[['flags']])
XPtr3 <- test_initializer(case3[['args']], case3[['flags']])
expect_identical(test_get(XPtr1, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_identical(test_get(XPtr1, '--ds'), list())
expect_identical(test_get(XPtr2, '@@fool'), list(c('abc', 'dfd', 'cc')))
expect_identical(test_get(XPtr2, '/ds'), list())
expect_identical(test_get(XPtr3, 'positionals'), list(c('a', 'c', 'b')))
expect_true(test_contains(XPtr1, '--good'))
expect_true(test_contains(XPtr2, '-g'))
## Test returns contains "before" -> "after"
expect_identical(test_pop(XPtr2, '-g'), c(TRUE, FALSE))
expect_identical(test_iterate(XPtr2),
list(list('/h',list(character())),
list('@f', list(character())),
list('--fool', list('44')),
list('@@fool', list(c('abc', 'dfd', 'cc')))))
expect_identical(test_iterate(XPtr1),
list(list('-h',list(character())),
list('--good', list(c('ad', '3', '4'))),
list('-f', list(character())),
list('--fool', list(c('34', 'abc', 'dfd', 'cc'),
c('44')))))
rm(case1, case2, case3, XPtr1, XPtr2, XPtr3)
rm(list=ls())
Rcpp::sourceCpp("cpp/locator.cpp")
copy
library(cmdline.arguments)
f<-function(x,y)((x -y * ((1 - exp(-m / 4)) / (m / 4)) - 0.035 * ((1 - exp(-m / 4
)) / (m / 4) - exp(-m / 4))))
x <- seq(-1, 1, length.out = 100)
x <- y <- (ppoints(100)-0.5) * 2
x
outer(x, y, f)
# Test the default initialzier
expect_silent(XPtr3 <- test_initializer())
expect_silent(XPtr4 <- test_initializer())
library(cmdline.arguments)
library(tinytest)
library(Rcpp)
setwd('inst/tinytest')
Rcpp::sourceCpp("cpp/locator.cpp")
# Other case, weird flags supplied
case2 <-
list(args = c('@f', '@@fool', 'abc', 'dfd', 'cc', '-g', 'ad', '3', '4', '--fool', '44', '/h'),
flags = c('@', '@@', '-', '/', '--'))
# Simple case no weirdness, except for the '--fool=34' to test if equal signs work as expected
case1 <-
list(args = c('-f', '--fool=34', 'abc', 'dfd', 'cc', '--good', 'ad', '3', '4', '--fool', '44', '-h'),
flags = c('-', '--'))
# case with positionals
case3 <-
list(args = c('a', 'c', 'b', '-f', '--fool', 'abc', 'dfd', 'cc', '--good', 'ad', '3', '4', '--fool', '44', '-h'),
flags = c('-', '--'))
XPtr1 <- test_initializer(case1[['args']], case1[['flags']])
expect_inherits(XPtr1, 'externalptr')
XPtr2 <- test_initializer(case2[['args']], case2[['flags']])
XPtr3 <- test_initializer(case3[['args']], case3[['flags']])
expect_identical(test_get(XPtr1, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_identical(test_get(XPtr1, '--ds'), list())
expect_identical(test_get(XPtr2, '@@fool'), list(c('abc', 'dfd', 'cc')))
expect_identical(test_get(XPtr2, '/ds'), list())
expect_identical(test_get(XPtr3, 'positionals'), list(c('a', 'c', 'b')))
expect_true(test_contains(XPtr1, '--good'))
expect_true(test_contains(XPtr2, '-g'))
## Test returns contains "before" -> "after"
expect_identical(test_pop(XPtr2, '-g'), c(TRUE, FALSE))
expect_identical(test_iterate(XPtr2),
list(list('/h',list(character())),
list('@f', list(character())),
list('--fool', list('44')),
list('@@fool', list(c('abc', 'dfd', 'cc')))))
expect_identical(test_iterate(XPtr1),
list(list('-h',list(character())),
list('--good', list(c('ad', '3', '4'))),
list('-f', list(character())),
list('--fool', list(c('34', 'abc', 'dfd', 'cc'),
c('44')))))
# Test the default initialzier
expect_silent(XPtr3 <- test_initializer())
# Test the default initialzier
expect_silent(XPtr3 <- test_default_initializer())
expect_silent(XPtr4 <- test_default_initializer())
rm(list=ls())
gc()
Rcpp::sourceCpp("cpp/locator.cpp")
# Test the default initialzier
expect_silent(XPtr3 <- test_default_initializer())
expect_silent(XPtr4 <- test_default_initializer())
expect_silent(test_insert_lvalue(XPtr3, case1[['args']]))
# Simple case no weirdness, except for the '--fool=34' to test if equal signs work as expected
case1 <-
list(args = c('-f', '--fool=34', 'abc', 'dfd', 'cc', '--good', 'ad', '3', '4', '--fool', '44', '-h'),
flags = c('-', '--'))
# Other case, weird flags supplied
case2 <-
list(args = c('@f', '@@fool', 'abc', 'dfd', 'cc', '-g', 'ad', '3', '4', '--fool', '44', '/h'),
flags = c('@', '@@', '-', '/', '--'))
# case with positionals
case3 <-
list(args = c('a', 'c', 'b', '-f', '--fool', 'abc', 'dfd', 'cc', '--good', 'ad', '3', '4', '--fool', '44', '-h'),
flags = c('-', '--'))
expect_silent(test_insert_lvalue(XPtr3, case1[['args']]))
expect_silent(test_insert_rvalue(XPtr4, case1[['args']]))
rm(XPtr3, XPtr4)
gc()
Rcpp::sourceCpp("cpp/locator.cpp")
# Test the default initialzier
expect_silent(XPtr3 <- test_default_initializer())
expect_silent(XPtr4 <- test_default_initializer())
expect_silent(test_insert_lvalue(XPtr3, case1[['args']]))
test_parse(XPtr3, case1$flags)
test_get(XPtr3, case1$flags[1])
case1$flags[1]
case1$args
test_get(XPtr3, '--fool')
expect_identical(test_get(XPtr3, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_identical(test_get(XPtr4, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_error(test_get(XPtr4, '--fool'), pattern = 'not parsed')
expect_silent(test_parse(XPtr4, case1$flags))
expect_identical(test_get(XPtr4, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
test_parse(XPtr4, case1$flags)
expect_identical(test_get(XPtr4, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_silent(test_insert_rvalue(XPtr4, case1[['args']]))
expect_error(test_get(XPtr4, '--fool'), pattern = 'not parsed')
expect_silent(test_parse(XPtr4, case1$flags))
expect_identical(test_get(XPtr4, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_identical(test_get(XPtr3, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
rm(case1)
gc(verbose = FALSE)
expect_identical(test_get(XPtr4, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
expect_identical(test_get(XPtr3, '--fool'), list(c('34', 'abc', 'dfd', 'cc'), c('44')))
invisible(gc(verbose = FALSE))
locale
sessionInfo
Sys.getlocale()
?Sys.getlocale
Sys.getlocale('LC_CTYPE')
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
auto getLocal(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
auto setlocale(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
auto  getlocale(const char* locale){
std::setlocale(LC_ALL, locale)
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
auto getLocal(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
const char* setlocale(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
void  getlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
auto getLocal(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
SEXP setlocale(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
void  getlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("")));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
#include <iostream>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
void getLocal(){
Rcout << std::locale("") << endl;
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
#includ
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
getLocal()
setlocale(Sys.getlocale())
getLocal()
setlocale(Sys.getlocale('LC_COLLATE'))
getLocal()
Sys.getlocale('LC_COLLATE')
Sys.getlocale()
Sys.getlocale('all')
Sys.getlocale('LC_ALL')
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale().name().c_str()));
}
// [[Rcpp::export]]
SEXP  setlocale(const char* locale){
return wrap(std::setlocale(LC_ALL, locale));
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
SEXP  setlocale(const char* locale){
return wrap(std::setlocale(LC_ALL, locale));
}
'
)
getLocal()
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
SEXP  setlocale(const char* locale){
return wrap(std::setlocale(LC_ALL, locale).name().c_str());
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
getLocal()getLocal()
getLocal()
Sys.getlocale()
Sys.getlocale('LC_COLLATE')

nilfiles <- cfiles[has_nil]
nilfiles
has_nil <- sapply(cfiles, function(x){
any(grepl('typedef R_NilValue', readLines(x)))
})
nilfiles <- cfiles[has_nil]
nilfiles
rm(typeofc)
rm(typeofC)
rm(tp)
Rcpp::sourceCpp('C:/Users/olive/Desktop/test.cpp')
typeofC()
grep
?grep
1.018^(1/4)
1000*(1.08^(1/4))
do.call
enquote
getwd()
fp <- '../r-source/src'
files <- list.files(recursive = TRUE, pattern = '((\\.h)|(\\.cpp)|(\\.c))$')
files
files <- list.files(recursive = TRUE, pattern = '(\\.h)|(\\.cpp)|(\\.c)$')
files
files <- list.files(recursive = TRUE, pattern = '((\\.h)|(\\.cpp)|(\\.c))$', recursive = TRUE)
files <- list.files(recursive = TRUE, pattern = '\\.h|\\.cpp|\\.c')
files
files <- list.files(fp, recursive = TRUE, pattern = '\\.h|\\.cpp|\\.c')
files
?rapply
X <- list(list(a = pi, b = list(c = 1L)), d = "a test")
rapply(X, sqrt, classes = "numeric", how = "replace")
rapply(X, deparse, control = "all") # passing extras. argument of deparse()
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
fif(files, 'do.call')
fif(files, 'do\\.call')
files
files <- list.files(fp, r
ecursive = TRUE,
pattern = '\\.h|\\.cpp|\\.c',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
files <- list.files(fp, r
ecursive = TRUE,
pattern = '\\.h|\\.cpp|\\.c',
full.names = TRUE)
files <- list.files(fp,
recursive = TRUE,
pattern = '\\.h|\\.cpp|\\.c',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
fif(files, 'do\\.call')
in_file <- fif(files, 'do\\.call')
files[in_file]
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
files
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do\\.call')
files[in_file]
in_file <- fif(files, 'do_docall')
files[in_file]
do.call
in_file <- fif(files, 'do_logic3')
files[in_file]
any
in_file <- fif(files, 'do_for')
files[in_file]
?for
?`for`
`for`
x <- for(1 in 1:100) rnor(100)
x <- for(1 in 1:100) rnorm(100)
x
x <- (for(1 in 1:100) rnorm(100))
in_file <- fif(files, 'do_forceAndCall')
files[in_file]
?do.call
in_file <- fif(files, 'do_docall')
files[in_file]
do.call
in_file <- fif(files, 'CADDDR')
files[in_file]
in_file <- fif(files, 'CAR')
files[in_file]
in_file <- fif(files, 'LCONS')
files[in_file]
in_file <- fif(files, 'do_internal')
files[in_file]
do.call
quote(sum(x))
class(quote(sum(x)))
in_file <- fif(files, 'do_function')
files[in_file]
lapply
?Rcpp::cppFunction
Rcpp::cppFunction(code = '
SEXP new_call(){
SEXP REALSXP_10 = PROTECT(ScalarReal(10));
SEXP REALSXP_5 = PROTECT(ScalarReal(5));
SEXP out = PROTECT(LCONS(install("+"), LCONS(
REALSXP_10, LCONS(
REALSXP_5, R_NilValue
)
)));
UNPROTECT(3);
return out;
}',
includes = c('R.h', 'Rinternal.h'))
Rcpp::cppFunction(code = '
SEXP new_call(){
SEXP REALSXP_10 = PROTECT(ScalarReal(10));
SEXP REALSXP_5 = PROTECT(ScalarReal(5));
SEXP out = PROTECT(LCONS(install("+"), LCONS(
REALSXP_10, LCONS(
REALSXP_5, R_NilValue
)
)));
UNPROTECT(3);
return out;
}',
includes = c('<R.h>', '<Rinternal.h>'))
Rcpp::cppFunction(code = '
SEXP new_call(){
SEXP REALSXP_10 = PROTECT(ScalarReal(10));
SEXP REALSXP_5 = PROTECT(ScalarReal(5));
SEXP out = PROTECT(LCONS(install("+"), LCONS(
REALSXP_10, LCONS(
REALSXP_5, R_NilValue
)
)));
UNPROTECT(3);
return out;
}',
includes = c('#include <R.h>', '#include <Rinternal.h>'))
Rcpp::cppFunction(code = '
SEXP new_call(){
SEXP REALSXP_10 = PROTECT(ScalarReal(10));
SEXP REALSXP_5 = PROTECT(ScalarReal(5));
SEXP out = PROTECT(LCONS(install("+"), LCONS(
REALSXP_10, LCONS(
REALSXP_5, R_NilValue
)
)));
UNPROTECT(3);
return out;
}',
includes = c('#include <R.h>', '#include <Rinternals.h>'))
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
in_file <- fif(files, 'LCONS')
fp <- '../r-source/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'LCONS')
files[in_file]
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
in_file <- fif(files, 'lcons')
files[in_file]
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
file.show(file.path(R.home("include"), "Rinternals.h"))
in_file <- fif(files, 'Rf_lcons')
files[in_file]
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
in_file <- fif(files, 'install')
files[in_file]
?do.call
do.call(sum, list(3,2,1))
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
getwd()
fp <- '../r-source/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, '_eval')
files[in_file]
eval
file.show("../r-source/src/main/eval.c" )
file.show("../r-source/src/main/names.c")
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
new_call1()
add_10_and_5_2
add_10_and_5_2()
?Rcpp::sourceCpp
Rcpp::sourceCpp(code = '#include <Rcpp.h>
#include <Rinternals.h>
#include <R.h>
using namespace Rcpp;
// [[Rcpp::export]]
SEXP new_call1(){
Function f("do.call");
SEXP out;
out = f("sum", List::create(3, 4, 5));
return out;
}
//[[Rcpp::export]]
SEXP add_10_and_5(){
SEXP REALSXP_10 = PROTECT(Rf_ScalarReal(10)),
REALSXP_5 = PROTECT(Rf_ScalarReal(5));
SEXP
out = PROTECT(Rf_lcons(Rf_install("+"),
Rf_lcons(REALSXP_10,
Rf_lcons(REALSXP_5, R_NilValue))));
UNPROTECT(3);
return out;
}
')
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
add_10_and_5(new.env())
in_file <- fif(files, 'Rf_eval')
files[in_file]
file.show("../r-source/src/include/Rinternals.h")
?sourceCpp
?do.call
do.call
enquote
quote(base::quote)
as.call(list(quote(base::quote), sum))
new.env
in_file <- fif(files, 'Rf_newenv')
files[in_file]
in_file <- fif(files, 'do_newenv')
files[in_file]
?call
in_file <- fif(files, 'errorcall_return')
files[in_file]
in_file <- fif(files, 'streql')
files[in_file]
in_file <- fif(files, 'PRIMNAME')
files[in_file]
in_file <- fif(files, 'ItemName')
files[in_file]
do.call
substitute(sum)
deparse(substitute(sum))
deparse(list(a=1, b = "foo"))
deparse(sum)
?do.call
do.call(function(x,y){x +  y}, list(3, 4))
new.env
fp <- '../r-source/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do_newenv')
files[in_file]
?new.env
SEXP attribute_hidden do_docall(SEXP call, SEXP op, SEXP args, SEXP rho)
{
if( Rf_isString(fun) ) {
//const char *str = Rf_translateChar(STRING_ELT(fun, 0));
std::string str = (std::string)Rf_translateChar(STRING_ELT(fun, 0));
if (str == ".Internal") Rf_error("illegal usage");
SETCAR(c, Rf_install(str));
} else {
std::string str = (std::string)PRIMNAME(fun)
if(TYPEOF(fun) == SPECIALSXP && streql(str, ".Internal"))
stop("illegal usage");
SETCAR(c, fun);
}
c = CDR(c);
for (i = 0; i < n; i++) {
// Not certain we'll get the correct result here.
// Note: VECTOR_ELT gets the i'th element of our vector
// SETCAR sets the value of the i'th element of our pairlist.
#ifndef NEW
SETCAR(c, VECTOR_ELT(args, i));
#else
SETCAR(c, mkPROMISE(VECTOR_ELT(args, i), rho));
SET_PRVALUE(CAR(c), VECTOR_ELT(args, i));
#endif
if (ItemName(names, (int)i) != R_NilValue)
SET_TAG(c, installTrChar(ItemName(names, i)));
c = CDR(c);
}
call = Rf_eval(call, envir);
in_file <- fif(files, 'Rf_install')
files[in_file]
substitute
deparse
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
in_file <- fif(files, 'PRIMNAME')
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
in_file <- fif(files, 'PRIMNAME')
files[in_file]
in_file <- fif(files, 'R_FunTab')
files[in_file]
in_file <- fif(files, 'struct SEXPREC')
files[in_file]
in_file <- fif(files, 'SEXPREC')
files[in_file]
?rank
?do.call
Rcpp::sourceCpp('C:/Users/olive/Desktop/ttests.cpp')
in_file <- fif(files, 'primsxp.offset')
files[in_file]
in_file <- fif(files, 'offset')
files[in_file]
in_file <- fif(files, 'primsxp')
files[in_file]
in_file <- fif(files, 'SEXPREC_HEADER')
files[in_file]
in_file <- fif(files, 'sxpinfo_struct')
files[in_file]
in_file <- fif(files, 'NAMED_BITS')
files[in_file]
in_file <- fif(files, 'PPkind')
files[in_file]
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
lsf.str()
?lsf.str
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
funcoffest(function(x)list(x))
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
funcoffest(function(x)list(x))
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
funcoffest(sum)
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
funcoffest(sum)
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
funcoffest(sum)
in_file <- fif(files, 'do_function')
fp <- '../r-source/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do_function')
files[in_file]
in_file <- fif(files, 'do_internal')
files[in_file]
in_file <- fif(files, 'INTERNAL')
files[in_file]
in_file <- fif(files, 'vmaxget')
files[in_file]
in_file <- fif(files, 'do_set')
files[in_file]
in_file <- fif(files, 'Rf_install')
files[in_file]
in_file <- fif(files, 'installFunTab')
files[in_file]
in_file <- fif(files, 'do_logic3')
fp <- '../r-source/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do_logic3')
files[in_file]
fp <- '../r-source/R-4.0.3/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do_logic3')
files[in_file]
Rcpp::sourceCpp('C:/Users/olive/Desktop/interals_test.cpp')
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
my_do_docall(function(...){x <- unlist(list(...));sum(x)}, list(1,2,3,4), new.env())
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
_rinternal_position()
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
rinternal_position_()
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
rinternal_position_()
microbenchmark(rinternal_position_)
microbenchmark::microbenchmark(rinternal_position_)
microbenchmark::microbenchmark(rinternal_position_())
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
my_do_docall(function(...){x <- unlist(list(...));sum(x)}, list(1,2,3,4), new.env())
my_do_docall(.Internal, list(1,2,3,4), new.env())
my_do_docall(".Internal", list(1,2,3,4), new.env())
commandArgs
commandArgs()
in_file <- fif(files, 'do_commandArgs')
files[in_file]
fp <- '../r-source/R-4.0.3/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do_commandArgs')
files[in_file]
pryr::sexp_type(function(x)3)
`[[.list`
`[[.`
`[[`
`[[`.list
`[[` <-
`[[<-`
fp <- '../r-source/R-4.0.3/src'
files <- list.files(fp,
recursive = TRUE,
pattern = '(\\.h|\\.cpp|\\.c)$',
full.names = TRUE)
fif <- function(files, pattern){
unlist(lapply(files, function(x){
l <- readLines(x)
any(grepl(pattern, l))
}))
}
in_file <- fif(files, 'do_subassign2')
files[in_file]
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
f <- list(1,2,3)
add_element(f, list(3,4))
Rcpp::sourceCpp('C:/Users/olive/Desktop/tt.cpp')
add_element(f, list(3,4))
f
names(f) <- c(NULL,NULL, "hello")
f
names(f) <- c(NA_character_, NA_Character, "hello")
names(f) <- c(NA_character_, NA_character, "hello")
names(f) <- c(NA_character_, NA_character_, "hello")
f
f <- unname(f)
names(f)[3] <- "hello"
f
do.call(sum, f)
my_do_call(sum, f)
my_do_docall(sum, f)
my_do_docall(sum, f, new.env())
f
memtrace(f)
?tracemem(f)
tracemen(f)
tracemem(f)
f[[4]] <- 3
f[[5]] <- 3
f[[6]] <- 3
f[[6]] <- 4
f[[6]] <- 21321
f[[6]] <- "21321"
f
tracemem(f)
f[[6]] <- "21321"
rm(f)
untracemem(f)
f <- vector("list", 6)
tracemem(f)
f[1] <- 2
f[2] <- 3
f[4] <- "hello"
rm(f)
rm(list=ls())

arg1[["choices"]]))
test_printflags(ptr2)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr1)
expect_silent(test_add_argument(ptr3,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr2)
test_printflags(ptr3)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
# 1 should succeed the latter 2 should fail
test_narguments(ptr1)
test_narguments(ptr2)
test_narguments(ptr3)
test_nflags(ptr1)
test_nflags(ptr2)
test_nflags(ptr3)
arg2[["flags"]]
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
# 1 should succeed the latter 2 should fail
test_narguments(ptr1)
test_narguments(ptr2)
test_narguments(ptr3)
test_nflags(ptr1)
test_nflags(ptr2)
test_nflags(ptr3)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
rm(ptr1, ptr2, ptr3)
gc()
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
expect_silent(test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr2)
test_printflags(ptr1)
expect_silent(test_add_argument(ptr3,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
# 1 should succeed the latter 2 should fail
test_narguments(ptr1)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
test_narguments(ptr2)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
test_narguments(ptr3)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
test_nflags(ptr1)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
library(cmdline.arguments)
rm(ptr1, ptr2, ptr3)
gc()
Rcpp::sourceCpp("cpp/container.cpp")
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
expect_silent(test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr2)
test_printflags(ptr1)
expect_silent(test_add_argument(ptr3,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
test_printflags(ptr1)
test_printflags(ptr2)
test_printflags(ptr3)
expect_silent(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
test_printflags2(ptr1)
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
test_printflags2(ptr1)
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
ptr3 <- test_container_default_initializer()
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
test_printflags(ptr1)
test_printflags2(ptr1)
test_printflags(ptr1)
test_printflags2(ptr1)
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr1)
test_printflags2(ptr1)
expect_silent(test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
test_printflags(ptr2)
test_printflags(ptr1)
test_printflags2(ptr2)
test_printflags2(ptr1)
test_printflags(ptr2)
test_printflags(ptr1)
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
test_printflags2(ptr2)
test_printflags2(ptr1)
library(cmdline.arguments)
ptr1 <- test_container_initializer(FALSE, TRUE)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
library(cmdline.arguments)
Rcpp::sourceCpp("cpp/container.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
# Should all succeed
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
# Should all succeed
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
# Should all succeed
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])
# Should all succeed
test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]])

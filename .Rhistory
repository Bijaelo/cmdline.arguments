intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 5)
res <- c(res, intToRoman(int %% unit, 50))
res
}
intToRoman(298)
res
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 5)
res <- c(res, intToRoman(int %% unit, 5))
res
}
intToRoman(298)
debug(intToRoman)
intToRoman(298)
int
unit
int
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
res
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), res)
}
intToRoman(298)
?rep
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
replicate(res, c('M','D', 'C', 'L', 'X', 'V', 'I'))
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
browser()
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
res
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
else if(unit == 1)
return(res)
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
else if(unit == 1)
return(res)
browser()
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
res
unit
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
else if(unit == 5)
res <- c(res, intToRoman(int %% unit, 1))
else if(unit == 1)
return(res)
if(unit == 1000)
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res <- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
else if(unit == 5)
res <- c(res, intToRoman(int %% unit, 1))
else if(unit == 1)
return(res)
browser()
if(unit == 1000)
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
unit
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
return(c(res, intToRoman(int %% unit, 500)))
else if(unit == 500)
return(c(res, intToRoman(int %% unit, 100)))
else if(unit == 100)
return(c(res, intToRoman(int %% unit, 50)))
else if(unit == 50)
return(c(res, intToRoman(int %% unit, 10)))
else if(unit == 10)
return(c(res, intToRoman(int %% unit, 5)))
else if(unit == 5)
return(c(res, intToRoman(int %% unit, 1)))
else if(unit == 1)
return(res)
if(unit == 1000)
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
return(c(res, intToRoman(int %% unit, 500)))
else if(unit == 500)
return(c(res, intToRoman(int %% unit, 100)))
else if(unit == 100)
return(c(res, intToRoman(int %% unit, 50)))
else if(unit == 50)
return(c(res, intToRoman(int %% unit, 10)))
else if(unit == 10)
return(c(res, intToRoman(int %% unit, 5)))
else if(unit == 5)
return(c(res, intToRoman(int %% unit, 1)))
else if(unit == 1)
return(res)
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
intToRoman <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
return(c(res, intToRoman(int %% unit, 500)))
else if(unit == 500)
return(c(res, intToRoman(int %% unit, 100)))
else if(unit == 100)
return(c(res, intToRoman(int %% unit, 50)))
else if(unit == 50)
return(c(res, intToRoman(int %% unit, 10)))
else if(unit == 10)
return(c(res, intToRoman(int %% unit, 5)))
else if(unit == 5)
return(c(res, intToRoman(int %% unit, 1)))
else if(unit == 1)
return(res)
browser()
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = res)
}
intToRoman(298)
intToRomanIndex <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRoman(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRoman(int %% unit, 100))
else if(unit == 100)
res<- c(res, intToRoman(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRoman(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRoman(int %% unit, 5))
else if(unit == 5)
res <- c(res, intToRoman(int %% unit, 1))
res
}
IndexToRoman <- function(index){
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = index)
}
intToRoman <- function(int){
IndexToRoman(intToRomanIndex(int))
}
intToRoman(298)
intToRomanIndex <- function(int, unit = 1000){
if(int == 0)
return(0)
res <- int %/% unit
if(unit == 1000)
res <- c(res, intToRomanIndex(int %% unit, 500))
else if(unit == 500)
res <- c(res, intToRomanIndex(int %% unit, 100))
else if(unit == 100)
res<- c(res, intToRomanIndex(int %% unit, 50))
else if(unit == 50)
res <- c(res, intToRomanIndex(int %% unit, 10))
else if(unit == 10)
res <- c(res, intToRomanIndex(int %% unit, 5))
else if(unit == 5)
res <- c(res, intToRomanIndex(int %% unit, 1))
res
}
IndexToRoman <- function(index){
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = index)
}
intToRoman <- function(int){
IndexToRoman(intToRomanIndex(int))
}
intToRoman(298)
IndexToRoman <- function(index){
browser()
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = index)
}
intToRoman(298)
index
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), each = index)
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), index)
intToRoman <- function(int){
paste0(IndexToRoman(intToRomanIndex(int)), collapse = '')
}
IndexToRoman <- function(index){
rep(c('M','D', 'C', 'L', 'X', 'V', 'I'), index)
}
intToRoman(298)
which(FALSE)
intToRomanIndex(298)
intToRomanIndex <- function(int){
# pre-allocate count vector
counts <- integer(6)
# store comparisons in a
numeral_unit <- c(1000, 500, 100, 50, 10, 5, 1)
numerals <- c('M', 'D', 'C', 'L', 'X', 'V', 'I')
# Do counting
for(i in seq_along(counts)){
numeral_unit_i <- numeral_unit[[2]][i]
counts[i] <- int %/% numeral_unit_i
int <- int %% numeral_unit_i
}
counts
}
intToRomanIndex(298)
intToRomanIndex <- function(int){
# pre-allocate count vector
counts <- integer(6)
# store comparisons in a
numeral_unit <- c(1000, 500, 100, 50, 10, 5, 1)
numerals <- c('M', 'D', 'C', 'L', 'X', 'V', 'I')
# Do counting
browser()
for(i in seq_along(counts)){
numeral_unit_i <- numeral_unit[[2]][i]
counts[i] <- int %/% numeral_unit_i
int <- int %% numeral_unit_i
}
counts
}
intToRomanIndex(298)
counts
int %% numeral_unit_i
counts
numeral_unit_i
intToRomanIndex <- function(int){
# pre-allocate count vector
counts <- integer(6)
# store comparisons in a
numeral_unit <- c(1000, 500, 100, 50, 10, 5, 1)
numerals <- c('M', 'D', 'C', 'L', 'X', 'V', 'I')
# Do counting
browser()
for(i in seq_along(counts)){
numeral_unit_i <- numeral_unit[i]
counts[i] <- int %/% numeral_unit_i
int <- int %% numeral_unit_i
}
counts
}
intToRomanIndex(298)
substr(100, 1, 1)
substr(c(1000, 500, 100, 50, 10, 5, 1), 1, 1)
as.numeric(substr(c(1000, 500, 100, 50, 10, 5, 1), 1, 1))
as.numeric(substr(c(1000, 500, 100, 50, 10, 5, 1), 1, 1)) == 5
library(cmdline.arguments)
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", TRUE, FALSE, const = 'hh')
f
library(cmdline.arguments)
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", TRUE, FALSE, const = 'hh')
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", TRUE, FALSE, const = 'hh')
createArgument
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", FALSE, FALSE, const = 'hh')
library(cmdline.arguments)
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", FALSE, FALSE, const = 'hh')
library(cmdline.arguments)
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", FALSE, FALSE, const = 'hh')
library(cmdline.arguments)
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", FALSE, FALSE, const = 'hh')
f <- createArgument('h', 'help', 'help', 3, "store_const", FALSE, FALSE, const = 'hh')
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
debugonce(createArgument)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
action
q
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
library(cmdline.arguments)
# Should throw an error because
f <- createArgument('h', 'help', 'help', 3, "store_value", FALSE, FALSE, const = 'hh')
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
setUnparsedArgs(f, NULL)
setUnparsedArgs(f, "")
parseargs(f)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
setUnparsedArgs(f, "")
parseargs(f)
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
setUnparsedArgs(f, NULL)
parseargs(f)
setUnparsedArgs(f, NULL)
parseargs(f)
setUnparsedArgs(f, NULL)
parseargs(f)
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
setUnparsedArgs(f, NULL)
parseargs(f)
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
setUnparsedArgs(f, NULL)
parseargs(f)
setUnparsedArgs(f, NULL)
parseargs(f)
setUnparsedArgs(f, NULL)
parseargs(f)
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', 3, "append_const", FALSE, FALSE, const = 'hh')
setUnparsedArgs(f, NULL)
parseargs(f)
setUnparsedArgs(f, NULL)
parseargs(f)
setUnparsedArgs(f, NULL)
parseargs(f)
library(cmdline.arguments)
f <- createArgument('h', 'help',
name = 'help',
narg = 3,
action = "append_const",
flag = FALSE,
required = FALSE,
const = 'hh')
setUnparsedArgs(f, NULL)
parseargs(f)
rm(f)
f <- createArgument('h', 'help', 'hello',
name = 'help',
narg = 3,
action = "append_const",
flag = FALSE,
required = FALSE,
const = 'hh')
debug(createArgument)
f <- createArgument('h', 'help', 'hello',
name = 'help',
narg = 3,
action = "append_const",
flag = FALSE,
required = FALSE,
const = 'hh')
flags
class(flags)
f <- createArgument('h', 'help', 'hello',
name = 'help',
narg = 3,
action = "append_const",
flag = FALSE,
required = FALSE,
const = 'hh')
name
?sprintf
library(cmdline.arguments)
paste0(c("a","b"))
paste0(c("a","b"), collapse = ',')
paste0('(', c("a","b"), ')', collapse = ',')

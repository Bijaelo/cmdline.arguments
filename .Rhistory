as.list(c(a = 1, b= 2, c = 3))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(Rcpp::IntegerVector dn){
return Rcpp::List(dn);
}
")
test(c(a = 1, b = 2, c = 4))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(Rcpp::CharacterVector dn){
return Rcpp::List(dn);
}
")
test(c(a = 1, b = 2, c = 4))
test(c(a = "1", b = "2", c = "4"))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(SEXP dn){
return Rcpp::as<CharacterVector>(dn);
}
")
test(c(a = "1", b = "2", c = "4"))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
")
test(c(a = "1", b = "2", c = "4"))
test(c(a = 1, b = 2, c = 3))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
")
test(c(a = 1, b = 2, c = 3))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
")
vals <- c(a = 1, b = 2, c = 4)
toInteger(vals)
toCharacter(vals)
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacterVector(SEXP dn){
return CharacterVector(dn);
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacterVector(SEXP dn){
return Rcpp::CharacterVector(dn);
}
")
toCharacterVector(vals)
toInteger(c(a = '1', b = '2', c = '4'))
toInteger(as.character(vals))
toCharacterVector(as.character(vals))
toCharacter(as.character(vals))
vals
as.character(vals)
vals
?as.character
as.integer(vals)
cvals <- c(A = '1', B = '2', C = '4')
toCharacter(cvals)
toCharacterVector(cvals)
cvals(toInteger(cvals))
toInteger(cvals)
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacterVector(SEXP dn){
return Rcpp::CharacterVector(dn);
}
// [[Rcpp::export]]
SEXP CharToList(Rcpp::CharacterVector dn){
return Rcpp::List(dn);
}
")
CharToList(c(a = '1', b = '2', c = '4'))
library(cmdline.arguments)
.Call(cmdline.arguments:::print_external, list('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A")
.Call(cmdline.arguments:::print_internal, list('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A")
.Call(cmdline.arguments:::print_external, list('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
browser()
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
})
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A")
'
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
})
f <- function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}
f <- function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}
f <- function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}
f <- function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]],, msg)
}
cat(msg)
}
f(A = 'hello', B = 'world')
f <- function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
}
f(A = 'hello', B = 'world')
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
browser()
cat(msg)
})
sg
msg
cat(msg)
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
browser()
cat(msg)
})
x
cat(msg = 'hlelo')
library(cmdline.arguments)
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
cat("I am not A but I want to be A, not B. B is worse then A\n")
cat("I am not A but I want to be A, not B. B is worse then A")
s
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
library(cmdline.arguments)
template<typename T>
Argument::Argument(vector<string> flags,
string name,
string action,
string narg, string help, ):{
}
as.list(c(a = 1, b = 2))
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
library(cmdline.arguments)
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
.Call(cmdline.arguments:::print_external, c('A' = 'hello', 'B' = 'world'), function(...){
dots <- list(...)
nams <- names(dots)
msg <- "I am not A but I want to be A, not B. B is worse then A\n"
for(i in seq_along(dots)){
msg <- gsub(nams[i], dots[[i]], msg)
}
cat(msg)
})
library(cmdline.arguments)
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacterVector(SEXP dn){
return Rcpp::CharacterVector(dn);
}
// [[Rcpp::export]]
SEXP CharToList(Rcpp::CharacterVector dn){
return Rcpp::List(dn);
}
// [[Rcpp::export]]
SEXP toNumeric(SEXP dn){
return Rcpp::as<NumericVector>(dn);
}
")
toNumeric(1:5)
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacterVector(SEXP dn){
return Rcpp::CharacterVector(dn);
}
// [[Rcpp::export]]
SEXP CharToList(Rcpp::CharacterVector dn){
return Rcpp::List(dn);
}
// [[Rcpp::export]]
SEXP toNumeric(SEXP dn){
return Rcpp::as<Rcpp::NumericVector>(dn);
}
")
toNumeric(1:5)
toNumeric(c('a' = 1, b = 2, c = 4))
as.integer(c(a = 1, b = 2))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacter(SEXP dn){
return Rcpp::as<Rcpp::CharacterVector>(dn);
}
// [[Rcpp::export]]
SEXP toCharacterVector(SEXP dn){
return Rcpp::CharacterVector(dn);
}
// [[Rcpp::export]]
SEXP CharToList(Rcpp::CharacterVector dn){
return Rcpp::List(dn);
}
// [[Rcpp::export]]
SEXP toNumeric(SEXP dn){
return Rcpp::as<Rcpp::NumericVector>(dn);
}
// [[Rcpp::export]]
SEXP toInteger(SEXP dn){
return Rcpp::as<Rcpp::IntegerVector>(dn);
}
")
toInteger(c('a' = 1, b = 2, c = 4))
toInteger(c('a' = 1.2, b = 2.4, c = 4.8))
.Call(cmdline.arguments:::print_internal, c('A' = 'hello', 'B' = 'world'), "I am not A but I want to be A, not B. B is worse then A\n")
library(cmdline.arguments)
?lme4::lmer
Rcpp::sourceCpp(code =
"
#include <vector>
#include <list>
#include <string>
using namespace std;
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(){
list<vector<string>> x;
Rcpp::Rcout << x.size() << endl;
return wrap(R_NiLValue);
}
"
)
test()
Rcpp::sourceCpp(code =
"
#include <vector>
#include <list>
#include <string>
using namespace std;
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(){
list<vector<string>> x;
Rcpp::Rcout << x.size() << endl;
return Rcpp::wrap(R_NiLValue);
}
"
)
test()
Rcpp::sourceCpp(code =
"
#include <vector>
#include <list>
#include <string>
using namespace std;
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP test(){
list<vector<string>> x;
Rcpp::Rcout << x.size() << endl;
return Rcpp::wrap(R_NilValue);
}
"
)
test()
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, c('a', 'b', '-f', 'a', '-f', 'b', '--f', 'a', 'b', '--g', '--f', 'c'), c('-', '--'))
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, c('a', 'b', '-f', 'a', '-f', 'b', '--f', 'a', 'b', '--g', '--f', 'c'), c('-', '--'))
x <- c('a', 'b', '-f', 'a', '-f', 'b', '--f', 'a', 'b', '--g', '--f', 'c')
y <- c('-', '--')
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
x
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
x
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
x
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
x
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
x
library(cmdline.arguments)
.Call(cmdline.arguments:::argument_locator_test, x, y)
library(cmdline.arguments)

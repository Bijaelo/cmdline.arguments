'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
auto getLocal(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
SEXP setlocale(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
void  getlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(std::locale(""));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("")));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
#include <iostream>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
void getLocal(){
Rcout << std::locale("") << endl;
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
#includ
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
getLocal()
setlocale(Sys.getlocale())
getLocal()
setlocale(Sys.getlocale('LC_COLLATE'))
getLocal()
Sys.getlocale('LC_COLLATE')
Sys.getlocale()
Sys.getlocale('all')
Sys.getlocale('LC_ALL')
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale().name().c_str()));
}
// [[Rcpp::export]]
SEXP  setlocale(const char* locale){
return wrap(std::setlocale(LC_ALL, locale));
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
SEXP  setlocale(const char* locale){
return wrap(std::setlocale(LC_ALL, locale));
}
'
)
getLocal()
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
SEXP  setlocale(const char* locale){
return wrap(std::setlocale(LC_ALL, locale).name().c_str());
}
'
)
Rcpp::sourceCpp(
code = '
#include <locale>
#include <Rcpp.h>
using namespace std;
using namespace Rcpp;
// [[Rcpp::export]]
SEXP getLocal(){
return wrap(string(std::locale("").name().c_str()));
}
// [[Rcpp::export]]
void  setlocale(const char* locale){
std::setlocale(LC_ALL, locale);
}
'
)
getLocal()getLocal()
getLocal()
Sys.getlocale()
Sys.getlocale('LC_COLLATE')
library(tidyverse)
my.mtcars <- mtcars %>%
dplyr::group_by(gear)%>%
dplyr::summarise(
sum.total = n(),
sum.mpg = sum(mpg))
lapply(c('sum.total', 'sum.mpg'), function(var) arrange(my.mtcars, vars(var)))
lapply(c('sum.total', 'sum.mpg'), function(var) arrange(my.mtcars, !!vars(var)))
?dplyr::vars
?arrange
arrange(my.mtcars, sum.total)
arrange(my.mtcars, vars(sum.total))
my.mtcars
arrange(my.mtcars, vars("sum.total"))
arrange(my.mtcars, !!("sum.total"))
arrange(my.mtcars, !!"sum.total")
arrange(my.mtcars, !!!"sum.total")
arrange(my.mtcars, sum.total)
arrange(my.mtcars, sum.mpg)
arrange(my.mtcars, {{'sum.mpg'}})
arrange(my.mtcars, {{sum.mpg}})
arrange(my.mtcars, {{"sum.mpg"}})
rlang::last_error()
lapply(c(sum.total, sum.mpg), function(var) arrange(my.mtcars, {{var}}))
lapply(c('sum.total', 'sum.mpg'), function(var) arrange(my.mtcars, .data[[var]]))
lapply(c('sum.total', 'sum.mpg'), function(var) arrange(my.mtcars, desc(.data[[var]])))
?|>
?`|>`
mtcars |> head()
stop() |> (function(...) {})()
mtcars |> head
mtcars |> head()
library(microbenchmark)
insall.packages(c('Rcpp', 'lme4', 'glmmTMB', 'microbenchmark', 'data.table', 'tidyverse', 'disk.frame', 'RcppArmadillo', 'BH', 'RcppEigen'))
install.packages(c('Rcpp', 'lme4', 'glmmTMB', 'microbenchmark', 'data.table', 'tidyverse', 'disk.frame', 'RcppArmadillo', 'BH', 'RcppEigen'))
install.packages(c('patchwork', 'lubridate', 'quantreg', 'tidymodels'))
library(cmdline.arguments)
install.packages('tinytest')
install.packages('covr')
library(Rcpp)
library(tinytest)
Rcpp::sourceCpp("cpp/container_v2.cpp")
setwd('inst')
Rcpp::sourceCpp("cpp/container_v2.cpp")
getwd()
setwd('tinytest')
Rcpp::sourceCpp("cpp/container_v2.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
ptr3 <- test_container_default_initializer()
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
rstudioapi::restartSession()
Rcpp::sourceCpp("cpp/container_v2.cpp")
rstudioapi::restartSession()
Rcpp::sourceCpp("cpp/container_v2.cpp")
library(tinytest)
setwd('inst/tinytest')
Rcpp::sourceCpp("cpp/container_v2.cpp")
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_error(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
expect_error(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
expect_equal(test_nflags(ptr1), 3)
test_nflags(ptr1)
test_nflags(ptr2)
test_getflags(ptr1)
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr3,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_error(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
arg2[["flags"]]
arg1[["flags"]]
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
expect_silent(test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_error(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
expect_error(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
expect_equal(test_nflags(ptr1), 3)
expect_equal(test_nflags(ptr2), 3)
expect_equal(test_narguments(ptr1), 3)
expect_equal(test_narguments(ptr2), 2)
ptr1 <- test_container_initializer(FALSE, TRUE)
# 2 and 3 should be identical.
ptr2 <- test_container_initializer(FALSE, FALSE)
ptr3 <- test_container_default_initializer()
arg1 <- list(name = 'test',
flags = c('-t', '--test'),
meta = NULL,
action = 'store',
option = 'i',
choices = NULL)
arg2 <- list(name = "foo",
flags = '--foo',
meta = 'Fav',
action = 'store_true',
option = 'v',
choices = NULL)
expect_silent(test_add_argument(ptr1,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr2,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr3,
arg1[["name"]],
arg1[["flags"]],
arg1[["meta"]],
arg1[["action"]],
arg1[["option"]],
arg1[["choices"]]))
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_silent(test_add_argument(ptr1,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]))
expect_error(test_add_argument(ptr2,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
expect_error(test_add_argument(ptr3,
arg2[["name"]],
arg2[["flags"]],
arg2[["meta"]],
arg2[["action"]],
arg2[["option"]],
arg2[["choices"]]), pattern = 'Duplicate flag')
expect_equal(test_nflags(ptr1), 3)
expect_equal(test_nflags(ptr2), 3)
expect_equal(test_narguments(ptr1), 3)
expect_equal(test_narguments(ptr2), 2)
expect_true(all(sapply(list(test_getflags(ptr1),
test_getflags(ptr2),
test_getflags(ptr3)),
function(x)all(x %in% c('--foo', '--test', '-t')))))
rm(ptr1, ptr2, ptr3)
gc()
sum(1:5)+ 2**2
490*0.8
73*6
unlist(vector(list, 3))
unlist(vector('list', 3))
d <- vector('list', 3)
d[[2] <- 3]
d[[2]] <- 3
unlist(d)
812.21+3510+217+103+55.91+720+65+5+1052+100+99+249
812.21+3510+217+103+55.91+720+65+5.08+1052+100+99+249+160
812.21+3510+217+103+55.91+720+65+5.08+1052+100+99+249+160-601.38
?commandArgs

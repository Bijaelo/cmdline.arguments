# should be true
isflag(f)
isrequired(f)
isflag(f)
isrequired(f)
f <- createArgument('h', 'help', 'help', '3', FALSE, TRUE)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', FALSE, TRUE)
rm(f)
gc()
f <- createArgument('h', 'help', 'help', '3', FALSE, TRUE)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', FALSE, TRUE)
# should be true
isflag(f)
isrequired(f)
library(cmdline.arguments)
## Test script for argument
rm(f)
gc()
f <- createArgument('h', 'help', 'help', '3', FALSE, TRUE)
# should be true
isflag(f)
isrequired(f)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', FALSE, TRUE)
# should be true
isflag(f)
isrequired(f)
f <- createArgument('h', 'help', 'help', '3', FALSE, FALSE)
# should be true
isflag(f)
isrequired(f)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
library(cmdline.arguments)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
# should be true
isflag(f)
isrequired(f)
f2 <- createArgument('h', name = 'help', narg = '3', flag = TRUE, required = FALSE)
debugonce(createArgument)
S
f2 <- createArgument('h', name = 'help', narg = '3', flag = TRUE, required = FALSE)
debugonce(createArgument)n
rm(f)
rm(f2)
gc()
library(cmdline.arguments)
## Test script for argument
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
isflag(f)
isrequired(f)
f2 <- createArgument('h', name = 'help', narg = '3', flag = TRUE, required = FALSE)
isflag(f)
getname(f)
isrequired(f)
## Test script for argument
rm(f, f2)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
f2 <- createArgument('h', name = 'help', narg = '3', flag = TRUE, required = FALSE)
isflag(f)
isrequired(f)
isflag(f)
isrequired(f)
rm(f)
isflag(f2)
isrequired(f2)
rm(f)
rm(f2)
gc()
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
isflag(f)
isrequired(f)
f2 <- createArgument('h', name = 'help', narg = '3', flag = TRUE, required = FALSE)
isflag(f2)
isrequired(f2)
rm(f)
rm(f2)
gc()
getwd()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3-', TRUE, FALSE)
args <- c("help", "me")
setUnparsedArgs(f, args)
tryCatch(setUnparsedArgs(f, args), error = print)
setUnparsedArgs(f, args)
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE)
setUnparsedArgs(f, args)
rm(f)
library(cmdline.arguments)
?require
require("lme4", quiet = TRUE)
lag(c(1,2,3))
lag(c(1,2,3)) - c(1, 2, 3)
?lag
lead
lag(ldeaths, 12)
ldeaths
dplyr::lead(c(1,2,3))
dplyr::lead(c(1,2,3), default = 0)
?lag
lag(ldeaths, -1)
class(ldeaths)
NA == NA
diff(c(1,2,3))
diff(c(NA, 1,2,3))
library(data.table)
fread("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
time <- fread("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
n <- nrow(df)
df$change <- with(df, c(FALSE, AirWayStatus[seq(2, n)] == AitWayStatus[seq(n -1)]))
setDF(df)
time <- fread("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
df <- fread("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
setDF(df)
df$change <- with(df, c(FALSE, AirWayStatus[seq(2, n)] == AitWayStatus[seq(n -1)]))
df
names(df)
df$change <- with(df, c(FALSE, AirwayStatus[seq(2, n)] == AirwayStatus[seq(n -1)]))
n
n <- nrow(df)
n
df$change <- with(df, c(FALSE, AirwayStatus[seq(2, n)] == AirwayStatus[seq(n -1)]))
df
# estimate the length of time since last change
df$time_between_change[df$change] <- with(df, diff(c(NA, Time[change])))
with(df, diff(c(NA, Time[change])))
df$Time[df$change]
class(df$Time)
df$Time <- as.POSIXct(df$Time)
df
# estimate the length of time since last change
df$time_between_change[df$change] <- with(df, diff(c(NA, Time[change])))
df
df$change <- with(df, c(FALSE, AirwayStatus[seq(n - 1)] == AirwayStatus[seq(2, n)]))
df
# estimate the length of time since last change
df$time_between_change[df$change] <- with(df, diff(c(NA, Time[change])) / 3600)
df
df$change <- with(df, !c(TRUE, AirwayStatus[seq(n - 1)] == AirwayStatus[seq(2, n)]))
df
# estimate the length of time since last change
df$hours_between_change[df$change] <- with(df, diff(c(NA, Time[change])) / 3600)
df
df$change <- with(df, c(FALSE, AirwayStatus[seq(n - 1)] != AirwayStatus[seq(2, n)]))
# estimate the length of time since last change
df$hours_between_change[df$change] <- with(df, diff(c(NA, Time[change])) / 3600)
df
df <- read.table("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
df <- scan("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
?read.table
df <- read.table("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA", header = TRUE, sep = "\t")
df <- readr::read_table("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA", header = TRUE, sep = "\t")
?readr::read_table
df <- readr::read_table("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
df
df <- readr::read_table2("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
df
df <- fread("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
df
# Read table: (Could get read.table to work)
library(data.table)
df <- fread("Time 	AirwayStatus
2020/01/01 00:00 	ETT/LMA
2020/01/01 01:00 	ETT/LMA
2020/01/01 02:00 	Own Airway
2020/01/01 03:00 	Own Airway
2020/01/01 04:00 	ETT/LMA")
setDF(df)
# Convert time to a date format
df$Time <- as.POSIXct(df$Time)
n <- nrow(df)
# Find changes
df$change <- with(df, c(FALSE, AirwayStatus[seq(n - 1)] != AirwayStatus[seq(2, n)]))
# estimate the length of time since last change
df$hours_between_change[df$change] <- with(df, diff(c(NA, Time[change])) / 3600)
df
summary(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
lm(hp ~ cyl * disp - 1, data = mtcars)
summary(lm(hp ~ cyl * disp - 1, data = mtcars))
summary(lm(hp ~ (cyl - 1) * disp - 1, data = mtcars))
print.lm
?print.lm
class(lm(hp ~ cyl * disp - 1, data = mtcars))
class(summary(lm(hp ~ cyl * disp - 1, data = mtcars)))
summary.lm
?summary.lm
help(summary.lm)
sum <- summary(lm(hp ~ cyl * disp - 1, data = mtcars))
sum$coefficients
sum$coef
library(sjPlot)
devtools::install_github("strengejacke/strengejacke")
tab_model(lm(hp ~ cyl * disp - 1, data = mtcars))
tab_model(lm(hp ~ cyl * disp - 1, data = mtcars),
pred.labels = c("cyl[4]", "cyl[6]", "cyl[8]",
"cyl[4] * disp", "cyl[6] * disp", "cyl[8] * disp"))
is.na(c(1,2,3))
is.na(list(1,2,3))
is.na(data.frame(1,2,3))
is.na(data.frame(c(1,2),c(2,3),c(3,4)))
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', 3+, TRUE, FALSE)
f <- createArgument('h', 'help', 'help', 3, TRUE, FALSE)
f <- createArgument('h', 'help', 'help', '3', TRUE, FALSE)
rm(f)
gc()
library(cmdline.arguments)
rm(list = ls())
gc()
library(cmdline.arguments)
library(Rcpp)
?cppFunction
library(cmdline.arguments)
sum(as.character(1:5))
as.numeric(as.character(1:5))
as.numeric(as.character(1:5+0.535342))
?as.character
?as.integer
as.character(3,4,5,6,7)
library(glue)
?brew
string="Sammy the {animal} {verb} a {noun}."
l <- list(animal = "shark", verb = "ate", noun = "fish")
do.call(glue, c(string , l))
l <- list(animal = "shark", verb = "ate", noun = "fish", hello = "my word")
do.call(glue, c(string , l))
?glue
s2 <- do.call(glue, c(string , l))
s2
glue
glue_data
?glue
rm(list=ls())
string="Sammy the {animal} {verb} a {noun}."
glue(string, list(animal = "shark", verb = "ate", noun = "fish"))
glue(string, animal = "shark", verb = "ate", noun = "fish")
detach('package:cmdline.arguments')
?detach
detach('package:cmdline.arguments', character.only = TRUE)
library(cmdline.arguments)
sum(list(1,2,3))
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE)
library(cmdline.arguments)
devtools::document(roclets = c('rd', 'collate'))
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
library(cmdline.arguments)
## Test script for argument
rm(f)
gc()
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
getparsefunc
class(f)
rm(f)
gc()
library(cmdline.arguments)
cmdline.arguments:::getparsefunc()
cmdline.arguments:::getparsefunc
cmdline.arguments:::getparsefunc(f)
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
args <- c("help", "me")
setUnparsedArgs(f, args)
getunparsedargs(f)
getunparsedargs
getlflag
parseargs(f)
parseargs
parseargs(f)
getparsefunc(f)
getunparsedargs(f)
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
getparsefunc
library(cmdline.arguments)
rm(f);gc();
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
gc()
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
gc()
getparsefunc(f)
args <- c("help", "me")
setUnparsedArgs(f, args)
getunparsedargs(f)
setUnparsedArgs(f, args)
setUnparsedArgs
getunparsedargs(f)
parseargs(f)
source('C:/Users/olive/Git_repos/cmdline.arguments/debug_tests/debug_tests.R')
rm(f)
gc()
library(cmdline.arguments)
f <- createArgument('h', 'help', 'help', '3+', TRUE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
args <- c("help", "me")
setUnparsedArgs(f, args)
# Okay here are 2 problems.
# 1: "setUnparsedArgs" does not work as expected
# 2: parseArgs fails later on.
# Fix:
# 1. figure out why setUnparsedArgs fails
# 2. insert safety check in case that "unparsed args" has length 0.
getunparsedargs(f)
## Test script for argument
rm(f)
gc()
f <- createArgument('h', 'help', 'help', '3+', FALSE, FALSE, as.character)
getflags(f)
getsflag(f)
getlflag(f)
getnarg(f)
getnargparsed(f)
isflag(f)
isrequired(f)
getname(f)
getparsefunc(f)
args <- c("help", "me")
setUnparsedArgs(f, args)
# Okay here are 2 problems.
# 1: "setUnparsedArgs" does not work as expected
# 2: parseArgs fails later on.
# Fix:
# 1. figure out why setUnparsedArgs fails
# 2. insert safety check in case that "unparsed args" has length 0.
getunparsedargs(f)
# Okay here are 2 problems.
# 1: "setUnparsedArgs" does not work as expected
# 2: parseArgs fails later on.
# Fix:
# 1. figure out why setUnparsedArgs fails
# 2. insert safety check in case that "unparsed args" has length 0.
getunparsedargs(f)
# Okay here are 2 problems.
# 1: "setUnparsedArgs" does not work as expected
# 2: parseArgs fails later on.
# Fix:
# 1. figure out why setUnparsedArgs fails
# 2. insert safety check in case that "unparsed args" has length 0.
getunparsedargs(f)
parseargs(f)
source('C:/Users/olive/Git_repos/cmdline.arguments/debug_tests/debug_tests.R')

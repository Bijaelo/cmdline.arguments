x
init
forceAndCall(2, f, init, x[[i]])
init <- forceAndCall(2, f, init, x[[i]])
out[[i]] <- init
out
as.bigz(out)
as.list(x)
unlist(as.list(x))
as.list(x_big)
unlist(as.list(x_big))
unlist
bigz
as.bigz
?as.bigz
as.bigq(x)
as.list(as.bigq(x))
unlist(as.list(as.bigq(x)))
?boot
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
boot(city, ratio, R = 999, stype = "w")
library(boot)
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
boot(city, ratio, R = 999, stype = "w")
city
debugonce(ratio)
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
boot(city, ratio, R = 999, stype = "w")
boot
getOption("boot.ncpus", 1L)
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
x <- boot(city, ratio, R = 999, stype = "w")
x
unclass(X)
unclass(x)
x$t0
x[[1]]
x$t
ratio
install.packages('faraway')
library(boot)
library(faraway)
data(orings, package = 'faraway')
orings_model <- glm(cbind(damage, 6-damage) ~ temp, family = binomial, data = orings)
summary(orings_model)
pchisq(orings_model$null.deviance, orings_model$df.null,lower=FALSE)
anova(orings_model)
anova(orings_model, test = 'chisq')
anova(orings_model, test = 'Chisq')
simulate(orings_model)
orings_model <- glm(cbind(damage = damage, not_damage = 6-damage) ~ temp, family = binomial, data = orings)
simulate(orings_model)
?simulate
simulate(orings_model, 1000)
xx <- simulate(orings_model, 1000)
dim(xx)
xx[, 1:4]
xx[, 1]
apply(xx, 2, class)
class(xx)
orings_model
summary(orings_model)
anova(orings_model)
model.response(orings_model)
orings_model
cc[,2]
xx[,2]
xx
xx[, 1]
simulate(orings_model)
simulate(orings_model)[[1]]
predict(orings_model)
?predict_glm
?predict.glm
predict(orings_model, type = 'response')
predict(orings_model, type = 'link')
predict(orings_model, type = 'respons')
?rbinom
rbinom(nrow(orings), 6, predict(orings_model, type = 'respons'))
rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons'))
matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = FALSE)
rowMeans(matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = FALSE))
rowMeans(matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = FALSE)) - predict(orings_model, type = 'respons') * 1000
predict(orings_model, type = 'respons')
colMeans(matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = FALSE)) - predict(orings_model, type = 'respons') * 1000
colMeans(matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = TRUE)) - predict(orings_model, type = 'respons') * 1000
matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = TRUE)
predict(orings_model, type = 'respons')) * 6
predict(orings_model, type = 'respons') * 6
matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = FALSE)
rowMeans(matrix(rbinom(nrow(orings) * 1000, 6, predict(orings_model, type = 'respons')), ncol = 1000, byrow = FALSE)) - predict(orings_model, type = 'respons') * 6
orings$damage
?oring
?orings
?simulate
orings_model$data
boot_metric <- function(x, w){
data <- x$data
data$damage <- simulate(x)[[1]][,1]
model <- update(x, data = data)
pchisq(model$null.deviance,
model$df.null,
lower=FALSE)
}
?BOOT
?boot
aircondit
air.fun <- function(data) {
ybar <- mean(data$hours)
para <- c(log(ybar), mean(log(data$hours)))
ll <- function(k) {
if (k <= 0) 1e200 else lgamma(k)-k*(log(k)-1-para[1]+para[2])
}
khat <- nlm(ll, ybar^2/var(data$hours))$estimate
c(ybar, khat)
}
air.rg <- function(data, mle) {
# Function to generate random exponential variates.
# mle will contain the mean of the original data
out <- data
out$hours <- rexp(nrow(out), 1/mle)
out
}
air.boot <- boot(aircondit, air.fun, R = 999, sim = "parametric",
ran.gen = air.rg, mle = mean(aircondit$hours))
air.boot
sum(abs(air.boot$t[,2]-1) > abs(air.boot$t0[2]-1))/(1+air.boot$R)
air.boot$R
sum(abs(air.boot$t[,2]-1) > abs(air.boot$t0[2]-1))
air.boot$mle
mean(air.boot$t)
mean(air.boot$data$hour)
pchisq(orings_model$null.deviance, orings_model$df.null,lower=FALSE)
ran_gen <- function(data, mle){
data$damage <- sim(orings_model)[[1]][,1]
data
}
boot_metric <- function(data, w){
model <- glm(cbind(damage = damage, not_damage = 6 - damage) ~ temp,
family = binomial, data = orings)
pchisq(model$null.deviance,
model$df.null,
lower=FALSE)
}
boot(orings, boot_metric, R = 1000, sim = 'parametric', ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance, orings_model$df.null,lower=FALSE))
boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
ran_gen <- function(data, mle){
data$damage <- simulate(orings_model)[[1]][,1]
data
}
boots <- boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
boots
boots$t
boot_metric <- function(data, w){
browser()
model <- glm(cbind(damage = damage, not_damage = 6 - damage) ~ temp,
family = binomial, data = orings)
pchisq(model$null.deviance,
model$df.null,
lower=FALSE)
}
boots <- boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
data
w
boots <- boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
data
c(1,2,3)[, 1]
matrix(1:4, ncol = 2)[1]
matrix(1:4, ncol = 2)[[1]]
matrix(1:4, ncol = 2)[,1]
dim(c(1,2,3))
if(dim(c(1,2,3)))print(x)
if(dim(c(1,2,3)))print(1)
if(ncol(c(1,2,3)))print(1)
ncol(c(1,2,3))
length(dim((c(1,2,3)))) > 1
statfun <- function(x){
data <- orings_model$data
data$damage <- if(length(dim(x)) > 1)
x[, 1]
else
x
newmod <- update(orings_model, data = data)
pchisq(newmod $null.deviance, newmod $df.null,lower=FALSE)
}
sims <- simulate(orings_model, 1000)
size = 6
n <- 1000 * size # 1000 * max value
probs <- predict(orings_model, type = 'response')
sims_man <- matrix(rbinom(n, size, probs),
ncol = 1000,
byrow = FALSE)
lapply(sims, statfun)
sapply(sims, statfun)
debug(boot_metric)
boots <- boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
model <- glm(cbind(damage = damage, not_damage = 6 - damage) ~ temp,
family = binomial, data = orings)
pchisq(model$null.deviance,
model$df.null,
lower=FALSE)
boot_metric <- function(data, w){
model <- glm(cbind(damage = damage, not_damage = 6 - damage) ~ temp,
family = binomial, data = data)
pchisq(model$null.deviance,
model$df.null,
lower=FALSE)
}
boots <- boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
boots
apply(sims_man, 2, statfun)
lapply(sims, statfun)
?apply
apply(sims_man, 2, statfun)
debug(statfun)
apply(sims_man, 2, statfun)
x
q
sims_man
dim(sims_man)
n <- 1000 * size # 1000 * max value
probs <- predict(orings_model, type = 'response')
sims_man <- matrix(rbinom(n, size, probs),
ncol = 1000,
byrow = FALSE)
dim(sims_man)
?rbinom
sims_man <- matrix(rbinom(n, 1000, probs),
ncol = 1000,
byrow = FALSE)
dim(sims_man)
probs
length(probs)
length(rbinom(n, 1000, probs))
nsim <- 1000  # 1000 * max value
nsim <- 1000 * nrow(orings)  # 1000 * max value
probs <- predict(orings_model, type = 'response')
sims_man <- matrix(rbinom(nsim * nrow(orings), 6, probs),
ncol = 1000,
byrow = FALSE)
dim(sims_man)
orings
sims_man <- matrix(rbinom(nsim, 6, probs),
ncol = 1000,
byrow = FALSE)
sims_man
dim(sims_man)
probs * 6 - rowMeans(sims)
sims_man
probs * 6 - colMeans(sims)
sims_man <- matrix(rbinom(nsim, 6, probs),
ncol = 1000,
byrow = TRUE)
probs * 6 - rowMeans(sims)
probs * 6
sims_man[, 1]
sims_man <- matrix(rbinom(nsim, 6, probs),
ncol = 1000,
byrow = FALSE)
sims_man[, 1]
rowMeans(sims)
probs
rbinom(10, 2, seq(0, 1, .1))
rbinom(1000, 2, seq(0, 1, .1))
matrix(rbinom(1000, 2, seq(0, 1, .1)), ncol = 1000)
matrix(rbinom(100000, 2, seq(0, 1, .1)), ncol = 1000)
dim(matrix(rbinom(100000, 2, seq(0, 1, .1)), ncol = 1000))
rowMeans(matrix(rbinom(100000, 2, seq(0, 1, .1)), ncol = 1000))
colMeans(matrix(rbinom(100000, 2, seq(0, 1, .1)), ncol = 1000))
colMeans(matrix(rbinom(100000, 2, seq(0, 1, .1)), ncol = 1000, byrow = TRUE))
siiim <- rbinom(100000, 2, seq(0, 1, .1)
)
length(seq(0, 1, .1))
siiim <- rbinom(11 * 1000, 2, seq(0, 1, .1))
matrix(siiim, ncol = 1000)
colMeans(matrix(siiim, ncol = 1000))
rowMeans(matrix(siiim, ncol = 1000))
probs
sims_man <- matrix(rbinom(nsim, 6, probs),
ncol = 1000)
rowMeans(sims_man) / 6
probs
rowMeans(sims_man) / 6 - probs
apply(sims_man, 2, statfun)
statfun <- function(x){
data <- orings_model$data
data$damage <- if(length(dim(x)) > 1)
x[, 1]
else
x
newmod <- update(orings_model, data = data)
pchisq(newmod$null.deviance, newmod$df.null, lower=FALSE)
}
apply(sims_man, 2, statfun)
?boot
air.boot$t0
air.boot$t[,2]
boot_metric <- function(data, w){
model <- glm(cbind(damage = damage, not_damage = 6 - damage) ~ temp,
family = binomial, data = data)
pchisq(model$null.deviance,
model$df.null,
lower=FALSE)
}
boots <- boot(orings, boot_metric,
R = 1000,
sim = 'parametric',
ran.gen = ran_gen,
mle = pchisq(orings_model$null.deviance,
orings_model$df.null,
lower=FALSE))
boot(orings_model, boot_metric, 1000)
boots
boots$t0
sum(boots$t > boots$t0) / boots$R
fix
?fix
r1 <- r2 <- r3 <- r4 <- raster(nrow=10, ncol=10)
values(r1) <- sample(0:150000, 100, replace=T)
values(r2) <- sample(0:1, 100, replace=T)
values(r3) <- sample(0:1, 100, replace=T)
values(r4) <- sample(0:1, 100, replace=T)
Y_Vals <- brick(r2,r3,r4)
??raster
x <- 1:10
x <- list()
x <- for(i in 1:10){
y <- rnorm(i)
x[[i]] <- y
}
x
x <- list()
x <- for(i in 1:10){
x[[i]] <- rnorm(i)
}
x
x <- list()
for(i in 1:10){
x[[i]] <- rnorm(i)
}
x
x <- for(i in 1:10){
x[[i]] <- rnorm(i)
}
x
rm(list=ls())
m<-matrix(sample.int(255,size=100,replace=TRUE),nrow=10,ncol=10)
cut(m,breaks=6, labels = c("<34","34-96", "96-159","159-190","190-221",">221"),include.lowest=FALSE,right = TRUE,dig.lab = 3, ordered_result = FALSE)
dim(m)
length(m)
# v2)
x <- cut(m,
breaks = 6,
labels = c("<34","34-96", "96-159","159-190","190-221",">221"),
include.lowest = FALSE,
right = TRUE,
dig.lab = 3,
ordered_result = FALSE)
dim(x) <- c(10, 10)
x
local
?eval.parent
Foo <- function(a) {
return(a + b)
}
b <- 1
Foo(2)
local({
b <- 3
print(Foo(2))
print(do.call(Foo, list(a = 2)))
})
local({ browser();
b <- 3
print(Foo(2))
print(do.call(Foo, list(a = 2)))
})
b
Foo(2)
debug(Foo)
environment()
parent.frame()
b
b + 2
Foo(2)
b
parent.frame()
e <- parent.frame()
e$b
rlang::search_env(e)
rlang::search_env(a)
rlang::search_env('b')
rlang::search_env('e')
local({
b <- 3
print(Foo(2))
print(do.call(Foo, list(a = 2)))
}, envir = .GlobalEnv)
c
Q
local({ browser();
b <- 3
print(Foo(2))
print(do.call(Foo, list(a = 2)))
})
environment()
globalenv()
parent.frame(n  = 2)
parent.frame(n  = 1)
parent.frame(n  = 777)
?new.env
??iage
??image
?image
hcl.colors(12, "YlOrRd", rev = TRUE)
library(cmdline.arguments)
breaks <- cut(
1:255,
5,
labels = c("<34", "34-96", "96-159", "159-190", "190-221", ">221"),
include.lowest = FALSE,
right = TRUE,
dig.lab = 3
)
breaks <- cut(
1:255,
6,
labels = c("<34", "34-96", "96-159", "159-190", "190-221", ">221"),
include.lowest = FALSE,
right = TRUE,
dig.lab = 3
)
breaks
m<-matrix(sample.int(255,size=100,replace=TRUE),nrow=10,ncol=10)
image(m, col = hcl.colors(7, 'Y10rRd', rev = TRUE), breaks = breaks)
image(m, col = hcl.colors(12, "YlOrRd", rev = TRUE), breaks = breaks)
image(m, col = hcl.colors(5, "YlOrRd", rev = TRUE), breaks = breaks)
levels(breaks)
length(levels(breaks))
hcl.colors(5, "YlOrRd", rev = TRUE)
breaks <- cut(
1:255,
6,
labels = c("<34", "34-96", "96-159", "159-190", "190-221", ">221"),
include.lowest = FALSE,
right = TRUE)
image(m, col = hcl.colors(5, "YlOrRd", rev = TRUE), breaks = breaks)
length(breaks)
breaks
?cut
breaks <- cut(
1:255,
6,
include.lowest = FALSE,
right = TRUE)
breaks
breaks <- cut(
1:255,
6,
include.lowest = FALSE,
labels = FALSE,
right = TRUE)
breaks
image(m, col = hcl.colors(5, "YlOrRd", rev = TRUE),
breaks = c(0, 34, 96, 159, 190, 221, Inf))
length(c(0, 34, 96, 159, 190, 221, Inf))
image(m, col = hcl.colors(6, "YlOrRd", rev = TRUE),
breaks = c(0, 34, 96, 159, 190, 221, Inf))
image(m, col = hcl.colors(6, "YlOrRd", rev = TRUE),
breaks = c(0, 34, 96, 159, 190, 221, 256))
image(m,
breaks = c(0, 34, 96, 159, 190, 221, 256))
?image
image(m, col = hcl.colors(6, "YlOrRd", rev = TRUE),
breaks = c(0, 34, 96, 159, 190, 221, 256)/256)

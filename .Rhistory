library(cmdline.arguments)
.Call(cmdline.arguments:::raw_argument_add, ptr, sample(letters, 10))
ptr <- .Call(cmdline.arguments:::raw_argument_create, 'individual', 'test', sample(LETTERS, 10))
.Call(cmdline.arguments:::raw_argument_digest, ptr)
.Call(cmdline.arguments:::raw_argument_add, ptr, sample(letters, 10))
.Call(cmdline.arguments:::raw_argument_add, ptr, sample(letters, 1))
.Call(cmdline.arguments:::raw_argument_digest, ptr)
rm(ptr)
rm(list = ls())
x <- 1:10
x[4] < 100
x[4] <- 100
x
sum(x)
sum(1:10)
rm(x)
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, sum, list(1,2,3,4))
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
.Call(cmdline.arguments:::make_args, list(data = mtcars, formula = mpg~hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::make_args, list(data = mtcars, formula = mpg~hp))
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
.Call(cmdline.arguments:::do_call, sum, as.list(1:100))
as.list(1:100)
.Call(cmdline.arguments:::make_args, as.list(1:100))
a <- .Call(cmdline.arguments:::make_args, as.list(1:100))
class(a)
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call2, sum, as.list(1:100))
.Call(cmdline.arguments:::do_call, sum, as.list(1:100))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, sum, as.list(1:100))
.Call(cmdline.arguments:::do_call2, sum, as.list(1:100))
sum(list(1:100))
sum(as.list(1:100))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call2, sum, as.list(1:100))
.Call(cmdline.arguments:::do_call, sum, as.list(1:100))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, sum, as.list(1:100))
.Call(cmdline.arguments:::do_call2, sum, as.list(1:100))
lm
?lm
.Call(cmdline.arguments:::do_call, lm, list(mpg ~ hp, data = mtcars, 1:24))
.Call(cmdline.arguments:::do_call, lm, list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
f <- .Call(cmdline.arguments:::do_call, lm, list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
f
class(f)
lm(mpg ~ hp, data = mtcars, subset = 1:24)
do.call(lm, list(mpg ~ hp, data = mtcars, subset = 1:24))
do.call('lm', list(mpg ~ hp, data = mtcars, subset = 1:24))
.Call(cmdline.arguments:::do_call, 'lm', list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, 'lm', list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
.Call(cmdline.arguments:::do_call3, 'lm', list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call3, 'lm', list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call3, 'lm', list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
.Call(cmdline.arguments:::do_call2, lm, list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
.Call(cmdline.arguments:::do_call1, lm, list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
.Call(cmdline.arguments:::do_call, lm, list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call3, 'lm', list(formula = mpg ~ hp, data = mtcars, subset = 1:24))
?stats:::.asSparse
stats:::.asSparse(matrix(sample(0:1, 1000, TRUE)))
stats:::.asSparse
.Call(cmdline.arguments:::do_call3, lm, list(data = mtcars,formula = mpg ~ hp))
.Call(cmdline.arguments:::do_call3, 'lm', list(data = mtcars,formula = mpg ~ hp))
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
.Call(cmdline.arguments:::make_args, list(data = mtcars,formula = mpg ~ hp))
class(.Call(cmdline.arguments:::make_args, list(data = mtcars,formula = mpg ~ hp)))
as.pairlist(list(data = mtcars, formla = mpg ~ hp))
class(as.pairlist(list(data = mtcars, formla = mpg ~ hp)))
as.call(lm(mpg ~ hp, data  = mtcars))
substitute(lm(mpg ~ hp, data  = mtcars))
eval(substitute(lm(mpg ~ hp, data  = mtcars)))
res <- .Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
res
res$call
object.size(res$call)
format(object.size(res$call), unit = 'MiB')
res <- .Call(cmdline.arguments:::do_call, lm, list(data = iris,formula = Sepal.Length ~ Sepal.Width))
res
object.size(res$call)
format(object.size(res$call), unit = 'MiB')
fol <- 'C:/Users/olive/Git_repos/r-source/R-4.0.3/src/'
files <- list.files(fol, recursive = TRUE, full.names = TRUE, pattern = '\\.c$|\\.h$')
files
find_thing <- function(file, pattern){
lines <- readLines(file)
any(grepl(lines, pattern))
}
lapply(files, find_thin, 'mkPROMISE')
lapply(files, find_thing, 'mkPROMISE')
find_thing <- function(file, pattern){
lines <- readLines(file)
any(grepl(pattern, lines))
}
files[sapply(files, find_thing, 'mkPROMISE')]
f
f$call
f$call[[1]]
f$call[[2]]
f$call[[3]]
class(f$call[[3]])
object.size(f$call[[3]])
f <- Rcpp::cppFunction(
"
SEXP mkPromis(SEXP x){
Rf_mkPROMISE(x);
return x;
}
", includes = '#include <defn.h>'
)
f <- Rcpp::cppFunction(
"
SEXP mkPromis(SEXP x){
Rf_mkPROMISE(x);
return x;
}
", includes = '#include <Defn.h>'
)
f <- Rcpp::cppFunction(
"
SEXP mkPromis(SEXP x){
Rf_mkPROMISE(x);
return x;
}
", includes = c('#include <R.h>')
)
f <- Rcpp::cppFunction(
"
SEXP mkPromis(SEXP x){
Rf_mkPROMISE(x);
return x;
}
", includes = c('#include <R.h>', '#include <Defn.h>')
)
?delayAssign
?delayedAssign
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
[[Rcpp::export()]]
SEXP lm2(Rcpp::Function fun, Rcpp::DataFrame data, Rcpp::Formula form){
return fun(form, data);
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
// [[Rcpp::export]]
SEXP lm2(Rcpp::Function fun, Rcpp::DataFrame data, Rcpp::Formula form){
return fun(form, data);
}
")
lm2(mtcars, mpg ~ hp)
lm2(lm, mtcars, mpg ~ hp)
identical(do.call(lm, list(data = mtcars, formula = mpg ~ hp)), do_call(lm, list(data = mtcars, formula = mpg ~ hp)))
do_call <- function(x, args).Call(cmdline.arguments:::do_call, x, args)
identical(do.call(lm, list(data = mtcars, formula = mpg ~ hp)), do_call(lm, list(data = mtcars, formula = mpg ~ hp)))
files <- list.files(fol, recursive = TRUE, pattern = '\\.h$')
files
files <- list.files(fol, recursive = TRUE, full.names = TRUE, pattern = '^include(.*)?\\.c$|\\.h$')
files
files <- list.files(fol, recursive = TRUE, pattern = '^include(.*)?\\.h$')
files
files <- list.files(fol, recursive = TRUE, pattern = 'include(.*)?\\.h$')
files
files <- list.files(fol, recursive = TRUE, pattern = '\\.h$')
files
files <- list.files(fol, recursive = TRUE, pattern = '^include')
iles
files
files <- list.files(file.path(fol,'include'), recursive = TRUE, pattern = '\\.h$')
files
works <- logical(length(files))
works
for(i in seq_along(files)){
f <- try(cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>')))
if(!inherits('try-error', f))
f[i] <- TRUE
}
for(i in seq_along(files)){
f <- try(Rcpp::cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>')))
if(!inherits('try-error', f))
f[i] <- TRUE
}
works
files
seq_along(files)
works <- logical(length(files))
for(i in seq_along(files)){
f <- try(Rcpp::cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>')))
if(!inherits('try-error', f))
f[i] <- TRUE
}
?try
i
files[i]
paste0('#include <', files[i], '>')
Rcpp::cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>'))
f <-
include
Rcpp::cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>'))
f
work
works
inherits('try-error', f)
inherits(f, 'try-error')
works <- logical(length(files))
for(i in seq_along(files)){
f <- try(Rcpp::cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>')))
if(!inherits(f, 'try-error'))
f[i] <- TRUE
}
for(i in seq_along(files)){
f <- try(Rcpp::cppFunction("SEXP f(SEXP x){return x;}", includes = paste0('#include <', files[i], '>')))
if(!inherits(f, 'try-error'))
works[i] <- TRUE
}
files[works]
cbind(files, works)
rm(list=ls())
rstudioapi::restartSession()
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
.Call(cmdline.arguments:::do_call, lm, list(data = mtcars,formula = mpg ~ hp))
library(cmdline.arguments)
sum(as.character(1:10))
library(cmdline.arguments)

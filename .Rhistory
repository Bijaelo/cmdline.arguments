file <- file.path(dir, 'main/coerce.c')
file
readLines(file)
grepl('MAYBE_REFERENCED', readLines(file))
any(grepl('MAYBE_REFERENCED', readLines(file)))
dat <- find_define('MAYBE_REFERENCED', files)
dat
files
file
dir <- "C:/Users/olive/Git_repos/r-source/R-4.0.3/src"
file <- file.path(dir, 'main/coerce.c')
any(files == file)
dat
files
dir <- "C:/Users/olive/Git_repos/r-source/R-4.0.3/src"
files <- list.files(dir, recursive = TRUE, full.names = TRUE, pattern = '\\.(c|h)$')
any(files == file)
dat <- find_define('MAYBE_REFERENCED', files)
results
dat <- find_define('#[[:space:]]*define[[:space:]]*MAYBE_REFERENCED', files)
find_define <- function(x, files){
in_file <- function(file, what){
lines <- readLines(file)
any(grepl(what, lines))
}
results <- unlist(lapply(files, in_file, what = x))
names(results)[results]
}
dat
dat <- find_define('#[[:space:]]*define[[:space:]]*MAYBE_REFERENCED', files)
dat <- find_define('MAYBE_REFERENCED', files)
dat
find_define <- function(x, files){
in_file <- function(file, what){
lines <- readLines(file)
any(grepl(what, lines))
}
results <- unlist(lapply(files, in_file, what = x))
browser()
names(results)[results]
}
dat <- find_define('MAYBE_REFERENCED', files)
results
find_define <- function(x, files){
in_file <- function(file, what){
lines <- readLines(file)
any(grepl(what, lines))
}
results <- unlist(lapply(files, in_file, what = x))
files[results]
}
find_define <- function(x, files){
in_file <- function(file, what){
lines <- readLines(file)
any(grepl(what, lines))
}
results <- unlist(lapply(files, in_file, what = x))
files[results]
}
dat <- find_define('#[[:space:]]*define[[:space:]]*MAYBE_REFERENCED', files)
dat
as.vector
pryr::typename(matrix(1:4, nrow = 2))
pryr::typename('matrix')
pryr::sexp_type(matrix(1:4, nrow = 2))
pryr::sexp_type(matrix(rnorm(4), nrow = 2))
dat <- find_define('#[[:space:]]*define[[:space:]]*coerceVector', files)
dat
dat <- find_define('Rf_coerceVector', files)
dat
as.pairlist(list(1,3,4))
`<-`
pryr::show_c_source(.Primitive("<-"))
`[`
`[.matrix`
`[[`
pryr::show_c_source(.Primitive("["))
m <- matrix(rnorm(1e4))
object_size(m)
library(pryr)
object_size(m)
y <- as.vector(m)
object_size(y)
object_size(list(y, m))
z <- as.vector(m, 'list')
object_size(list(y, m, z))
z
y
z <- as.vector(m, 'vector')
z <- as.vector(m, 'double')
object_size(list(y, m, z))
m
y
z
m
y
rm(m, y, z)
sys.info()
Sys.info()
sessionInfo()
?nlme::pdBlocked()
math <- read.csv('https://raw.githubusercontent.com/rnorouzian/v/main/mlgrp1.csv')
math
library(nlme)
pdBlocked(
list(~ 0 + dummy(lb_wght, "1") + dummy(lb_wght, "1"):grade,
~ 0 + dummy(lb_wght, "0") + dummy(lb_wght, "0"):grade))
unclass8pdBlocked(
list(~ 0 + dummy(lb_wght, "1") + dummy(lb_wght, "1"):grade,
~ 0 + dummy(lb_wght, "0") + dummy(lb_wght, "0"):grade))
unclass(pdBlocked(
list(~ 0 + dummy(lb_wght, "1") + dummy(lb_wght, "1"):grade,
~ 0 + dummy(lb_wght, "0") + dummy(lb_wght, "0"):grade)))
pdBlocked(
list(~ 0 + dummy(lb_wght, "1") + dummy(lb_wght, "1"):grade,
~ 0 + dummy(lb_wght, "0") + dummy(lb_wght, "0"):grade))
?nlme::dummy
?dummy
math <- within(math, lb_wght <- as.factor(lb_wght))
summary(math)
m2 <- lme(
math ~ 0 + lb_wght + lb_wght:grade,
data = math,
random = list(id = pdBlocked(
list(~ 0 + dummy(lb_wght, "1") + dummy(lb_wght, "1"):grade,
~ 0 + dummy(lb_wght, "0") + dummy(lb_wght, "0"):grade))))
m2 <- lme(
math ~ 0 + lb_wght + lb_wght:grade,
data = math,
random = list(id = pdBlocked(
list(~ 0 + lb_wght*grade))))
m2 <- lme(
math ~ 0 + lb_wght + lb_wght:grade,
data = math,
random = list(id = pdBlocked(~ 0 + lb_wght*grade)))
m2 <- lme(
math ~ 0 + lb_wght + lb_wght:grade,
data = math,
random = list(id = pdBlocked(list(~ 0 + lb_wght*grade))))
lme4::dummy
?lme4::dummy
within(Orthodont, dummy(Sex, 'Female'))
library(lme4)
within(Orthodont, dummy(Sex, 'Female'))
lmer(distance ~ age + (age|Subject) +
(0+dummy(Sex, "Female")|Subject), data = Orthodont)
lmer(distance ~ age + (age|Subject) +
(0+dummy(Sex, "Male")|Subject), data = Orthodont)
m2 <- lme(
math ~ 0 + lb_wght + lb_wght:grade,
data = math,
random = list(id = pdBlocked(
list(~ 0 + dummy(lb_wght, "1") + dummy(lb_wght, "1"):grade,
~ 0 + dummy(lb_wght, "0") + dummy(lb_wght, "0"):grade))))
m2
summary(m2)
lmer(math ~ 0 + lb_wght + lb_wght:grade + (0|dummy(lb_wght, '1')/grade) + (0|dummy(lb_wght, '0')/grade))
lmer(math ~ 0 + lb_wght + lb_wght:grade + (0|dummy(lb_wght, '1')/grade) + (0|dummy(lb_wght, '0')/grade), data = math)
lmer(math ~ 0 + lb_wght + lb_wght:grade + (0|dummy(lb_wght, '1')) +
(0|dummy(lb_wght, '0')), data = math)
lmer(math ~ 0 + lb_wght + lb_wght:grade + (1 + dummy(lb_wght)|grade) +
(0+dummy(lb_wght, '0')|grade), data = math)
lmer(math ~ 0 + lb_wght + lb_wght:grade + (0 + dummy(lb_wght)|grade) +
(0+dummy(lb_wght, '0')|grade), data = math)
m3 <- lmer(math ~ 0 + lb_wght + lb_wght:grade + (0 + dummy(lb_wght)|grade) +
(0+dummy(lb_wght, '0')|grade), data = math)
m3
m2
m3 <- lmer(math ~ 0 + lb_wght + lb_wght:grade + (0 + dummy(lb_wght, '1')|grade) +
(0+dummy(lb_wght, '0')|grade), data = math)
m3
rm(list=ls())
.Internal(inspect(matrix(rnorm(100))))
x <- rnorm(1000)
.Internal(inspect(x))
is.atomic(x)
system.time(for (i in 1:1e9) break)
x <- 1:1e10
x
memory.size(x)
pryr::object_size(x)
rm(x)
x <- 1:1e10
.Internal(inspect(x))
rm(x)
?seq.int
object.size(1:1e10)
paste(c(1,2,3), c(2,3,4))
data.frame(c(1,2,3), c(2,3,4))
paste(data.frame(c(1,2,3), c(2,3,4)))
data.frame(c(1,2,3), c(2,3,4))
df <- data.frame(c(1,2,3), c(2,3,4))
as.matrix(df)
paste0(as.matrix(df))
paste0(as.matrix(df), collapse = ',')
do.call(paset, as.list(df))
do.call(paste, as.list(df))
index <- 1:2
newcols <- lapply(index, function(x)
do.call(as.list(df[, x:(x +  1)])))
df
f <- function(x)
do.call(as.list(df[, x:(x +  1)])))
f <- function(x)
do.call(as.list(df[, x:(x +  1)]))
f(1:2)
f <- function(x)
do.call(paste, as.list(df[, x:(x +  1)]))
f(1:2)
debug(f)
f(1:2)
df[, x:(x + 1)]
x:(x + 1)
x
f(1)
undebug(f)
newcols <- lapply(index, function(x)
do.call(paste, as.list(df[, x:(x +  1)])), sep = ',')
index = 1
newcols <- lapply(index, function(x)
do.call(paste, as.list(df[, x:(x +  1)])), sep = ',')
?paste
newcols <- lapply(index, function(x)
do.call(paste, as.list(df[, x:(x +  1)]), sep = ','))
newcols <- lapply(index, function(x)
do.call(paste, c(as.list(df[, x:(x +  1)]), sep = ',')))
newcols
c(df)
c(df, sep = ',')
f(df)
newcols <- lapply(index, function(x)
do.call(paste, c(as.list(df[, x:(x +  1)]), sep = ',')))
newcols
library(data.table)
fread('Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3')
df <- fread('Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3')
index <- seq_len(ncol(df) %% 2) + 1
index
ncol(df)
ncol(df) %/% 2
ncol(df - 1) %/% 2
ncol(df - 1) %/% 2 * 2
seq_len(ncol(df - 1) %/% 2)
seq_len(ncol(df - 1) %/% 2) * 2 + 1
seq.int(2, 7, 2)
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(adf[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df$index, newcols))
new_names <- paste0('column' paste0(index, '&', index + 1))
names(df_new)[0] <- new_names
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df$index, newcols))
new_names <- paste0('column' paste0(index, '&', index + 1))
names(df_new)[0] <- new_names
newcols
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df$index, newcols))
new_names <- paste0('column', paste0(index, '&', index + 1))
names(df_new)[0] <- new_names
df_new
new_names
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df$index, newcols))
new_names <- paste0('column', paste0(index, '&', index + 1))
names(df_new)[-1] <- new_names
df_new
c(df$index, newcols)
df$index
df
df$Id
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df$Id, newcols))
new_names <- paste0('column', paste0(index, '&', index + 1))
names(df_new)[-1] <- new_names
df_new
c(df$Id, newcols)
df$Id
c(newcols, df$Id)
c(newcols, df[['Id']])
c(newcols, df[,'Id'])
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df[, 'Id'], newcols))
new_names <- paste0('column', paste0(index, '&', index + 1))
names(df_new)[0] <- new_names
df_new
dim(df_new)
do.call(cbind, c(df[, 'Id'], newcols))
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- do.call(cbind, c(df[, 'Id'], newcols))
new_names <- paste0('column', paste0(index, '&', index + 1))
names(df_new)[-1] <- new_names
df_new
new_names
names(df_new)
index <- seq.int(2, ncol(df), 2)
newcols <- lapply(index, function(x)
do.call(paste, c(df[, x:(x +  1)], sep = ',')))
df_new <- as.data.frame(do.call(cbind, c(df[, 'Id'], newcols)))
new_names <- paste0('column', paste0(index, '&', index + 1))
names(df_new)[-1] <- new_names
df_new
# Index to iterate over every second column
index <- seq.int(2, ncol(df), 2)
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(x)
paste(df[[i]], df[[i + 1]], sep = ',')
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- as.data.frame(do.call(cbind, c(df[, 'Id'], newcols)))
# Generate names. Once again use `paste(v1, v2)` to paste across
new_names <- paste0('column', paste0(index, '&', index + 1))
# Set names to non-id columns
names(df_new)[-1] <- new_names
# Print result
df_new
readr::read_table('C:\\Users\\olive\\Downloads\\archive\\BankChurners.csv')
library(readr)
?read_table
df <- fread(readr::read_table('C:\\Users\\olive\\Downloads\\archive\\BankChurners.csv'))
library(data.table)
df <- fread('C:\\Users\\olive\\Downloads\\archive\\BankChurners.csv')
df
dim(df)
filter(df, Attrition_Flag == "Attrited Customer")
names(df)
filter(df, Attrition_Flag == "Attrited Customer")
df %>% filter(Attrition_Flag == 'Attrited Customer')
library(dplyr)
df %>% filter(Attrition_Flag == 'Attrited Customer')
raw_data <- df
raw_data %>%
filter(Attrition_Flag == "Attrited Customer",
Edcation_Level == 5)
names(df)[1:ncol(df - 1)]
names(df)[1:ncol(df) - ]
names(df)[1:ncol(df) - 2]
names(df)[1:(ncol(df) - 2)]
raw_data %>%
filter(Attrition_Flag == "Attrited Customer",
Education_Level == 5)
raw_data %>%
filter(Education_Level == 5)
raw_data$Education_Level
raw_data %>%
filter(Attrition_Flag == "Attrited Customer",
factor(Education_Level) == 5)
factor(raw_data$Education_Level)
levels(factor(raw_data$Education_Level))
raw_data %>%
filter(Attrition_Flag == "Attrited Customer",
Education_Level == 'Post-Graduate')
3
rm(list = ls())
df <- fread("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
setDF(df)
# Index to iterate over every second column
index <- seq.int(2, ncol(df), 2)
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
paset(df[[i]], df[[i + 1]], sep = ',')
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- as.data.frame(do.call(cbind, c(df[, 'Id'], newcols)))
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(x)
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- as.data.frame(do.call(cbind, c(df[, 'Id'], newcols)))
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(x)
paste(df[[i]], df[[i + 1]], sep = ','))
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(i)
paste(df[[i]], df[[i + 1]], sep = ','))
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- as.data.frame(do.call(cbind, c(df[, 'Id'], newcols)))
# Generate names. Once again use `paste(v1, v2)` to paste across
new_names <- paste0('column', paste0(index, '&', index + 1))
# Set names to non-id columns
names(df_new)[-1] <- new_names
newcols
df_new
index
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(i)
paste(df[[i]], df[[i + 1]], sep = ','))
newcols
do.call(cbind, c(df[, 'Id'], newcols)
)
df[, 'Id']
df[, 1]
df[, 'Id']
df[, 'Id'], newcols)
df[['Id']]
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- as.data.frame(do.call(cbind, c(id = df[, 'Id'], newcols)))
newcols
df_new
newcols
do.call(cbind, newcols)
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- cbind(Id = df$Id, as.data.frame(do.call(cbind, newcols)))
df_new
# Generate names. Once again use `paste(v1, v2)` to paste across
new_names <- paste0('column', paste0(index, '&', index + 1))
new_names
# Set names to non-id columns
names(df_new)[-1] <- new_names
# Print result
df_new
rm(list = ls())
df <- fread("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
setDF(df)
# Index to iterate over every second column
index <- seq.int(2, ncol(df), 2)
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(i)
paste(df[[i]], df[[i + 1]], sep = ','))
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- cbind(Id = df$Id, as.data.frame(do.call(cbind, newcols)))
# Generate names. Once again use `paste(v1, v2)` to paste across
new_names <- paste0('column', paste0(index, '&', index + 1))
# Set names to non-id columns
names(df_new)[-1] <- new_names
# Print result
df_new
scan("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
read.table("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
tibble("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
?tibble
read.table("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
?connection
f <- file("Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
f
read.table(f)
read.table(header = TRUE, text = "Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
df <- read.table(header = TRUE, text = "Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
# Index to iterate over every second column
index <- seq.int(2, ncol(df), 2)
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(i)
paste(df[[i]], df[[i + 1]], sep = ','))
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- cbind(Id = df$Id, as.data.frame(do.call(cbind, newcols)))
# Generate names. Once again use `paste(v1, v2)` to paste across
new_names <- paste0('column', paste0(index, '&', index + 1))
# Set names to non-id columns
names(df_new)[-1] <- new_names
# Print result
df_new
# import data
df <- read.table(header = TRUE,
text = "Id column1 column2 column3 column4 column5 column6
3       0      50       0      51       0      54
5       1      24       3      56       1      26
6       5       7       5       8       5       3")
# Index to iterate over every second column
index <- seq.int(2, ncol(df), 2)
# Create new columns (split data frame, convert to vectors, combine vectors across using `paste(v1, v2, sep = ',')`.
newcols <- lapply(index, function(i)
paste(df[[i]], df[[i + 1]], sep = ','))
# Actually create the columns, and convert to a `data.frame`. Combine using `do.call(cbind, ...)`. Add our Id from the original data.
df_new <- cbind(Id = df$Id, as.data.frame(do.call(cbind, newcols)))
# Generate names. Once again use `paste(v1, v2)` to paste across
new_names <- paste0('column', paste0(index, '&', index + 1))
# Set names to non-id columns
names(df_new)[-1] <- new_names
# Print result
df_new
class(df_new)

using namespace Rcpp;
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
CharacterVector names = data.names();
R_xlen_t i = 0;
if(names.size()==0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
if(!CharacterVector::is_na(names[i])){
*Nstart = names[i];
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
CharacterVector names = data.names();
if(names.size()==0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
if(!CharacterVector::is_na(names[i])){
*Nstart = names[i];
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
CharacterVector names = data.names();
if(names.size()==0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
if(!CharacterVector::is_na(names[i])){
*Nstart = names[i];
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
")
appendList(list(1,2,3,4), list(1,2,3))
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
SEXP names = data.names();
if(Rf_length(names) == 0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
SEXP namei = STRING_ELT(names, i);
if(namei != R_NilValue && namei != '\0'){
*Nstart = namei;
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
SEXP names = data.names();
if(Rf_length(names) == 0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
SEXP namei = STRING_ELT(names, i);
if(namei != R_NilValue && namei != '\0'){
*Nstart = namei;
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
SEXP names = data.names();
if(Rf_length(names) == 0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
SEXP namei = STRING_ELT(names, i);
if(namei != R_NilValue && namei != '\\0'){
*Nstart = namei;
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
SEXP names = data.names();
if(Rf_length(names) == 0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
SEXP namei = STRING_ELT(names, i);
if(namei != R_NilValue && namei != '\\0'){
*Nstart = namei;
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
")
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
SEXP names = data.names();
if(Rf_length(names) == 0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
SEXP namei = STRING_ELT(names, i);
if(namei != R_NilValue){
*Nstart = namei;
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
return out;
END_RCPP
}
")
appendList(list(1,2,3,4), list(1,2,3))
appendList(list(1,2,3,4), list('a' = 1,2,3))
list('a' = 1,2,3)
Rcpp::sourceCpp(code =
"
#include <Rcpp.h>
using namespace Rcpp;
inline void insertList(List::iterator& start, CharacterVector::iterator& Nstart,
List& data, R_xlen_t& n){
SEXP names = data.names();
if(Rf_length(names) == 0){
for(R_xlen_t i = 0; i < n; i++, start++)
*start = data[i];
Nstart = Nstart + n;
}else{
for(R_xlen_t i = 0; i < n; i++, start++, Nstart++){
*start = data[i];
SEXP namei = STRING_ELT(names, i);
if(namei != R_NilValue){
*Nstart = namei;
}
// [[Rcpp::export]]
SEXP appendList(SEXP list1, SEXP list2){
BEGIN_RCPP
List l1 = as<List>(list1), l2 = as<List>(list2);
R_xlen_t n1 = l1.size(), n2 = l2.size(), ntot = n1 + n2;
List out(ntot);
CharacterVector names(ntot);
auto it = out.begin();
auto ni = names.begin();
/*
if(na1.size() == 0){
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
}else{
for(auto i = 0; i < n1; i++, it++, ni++){
*it = l1[i];
}
for(auto i = 0; i < n2; i++, it++, ni++){
*it = l2[i];
}
*/
insertList(it, ni, l1, n1);
insertList(it, ni, l2, n2);
out.attr(\"names\") = names;
return out;
END_RCPP
}
")
appendList(list(1,2,3,4), list('a' = 1,2,3))
attributes(appendList(list(1,2,3,4), list('a' = 1,2,3)))
c(list(1,2,3,4), list('a' = 1,2,3))
names(c(list(1,2,3,4), list('a' = 1,2,3)))
attributes(c(list(1,2,3,4), list('a' = 1,2,3)))
attributes(c(list(1,a =2,3,4), list('a' = 1,2,3)))
attributes(c(list(1,c =2,3,4), list('a' = 1,2,3)))
attributes(appendList(list(1,c = 2,3,4), list('a' = 1,2,3)))
appendList(list(1,c = 2,3,4), list('a' = 1,2,3))
names(list("a" = 1, 2, 3))
list("a" = 1, 2, 3)
attributes(list("a" = 1, 2, 3))
for(i in 1:100)appendList(list(1,c = 2,3,4), list('a' = 1,2,3))
for(i in 1:1000)appendList(list(1,c = 2,3,4), list('a' = 1,2,3))
for(i in 1:10000)appendList(list(1,c = 2,3,4), list('a' = 1,2,3))
for(i in 1:100000)appendList(list(1,c = 2,3,4), list('a' = 1,2,3))
microbenchmark(appendList(list(1,c = 2,3,4), list('a' = 1,2,3)))
library(microbenchmark)
microbenchmark(appendList(list(1,c = 2,3,4), list('a' = 1,2,3)))
microbenchmark(appendList(list(1,c = 2,3,4), list('a' = 1,2,3)), times = 1e5)
data <- as.list(1:100)
names(data)[7] <- 'a'
data2 <- data
names(data2)[88] <- 'b'
microbenchmark(appendList = appendList(data, data2))
data <- as.list(1:1000)
names(data)[7] <- 'a'
data2 <- data
names(data2)[88] <- 'b'
microbenchmark(appendList = appendList(data, data2))
data <- as.list(1:10000)
names(data)[7] <- 'a'
data2 <- data
names(data2)[88] <- 'b'
microbenchmark(appendList = appendList(data, data2))
microbenchmark(appendList = appendList(data, data2),
c = c(data, data2))
data <- as.list(1:1e6)
names(data)[7] <- 'a'
data2 <- data
names(data2)[88] <- 'b'
microbenchmark(appendList = appendList(data, data2),
c = c(data, data2))
c
pryr::show_c_source(.Primitive("c"))
unlist(list(data, data1))
unlist(list(data, data2))
unlist(list(data, data2), FALSE)
microbenchmark(appendList = appendList(data, data2),
c = c(data, data2),)
microbenchmark(appendList = appendList(data, data2),
c = c(data, data2), unlist = unlist(list(data, data2), FALSE))
library(cmdline.arguments)
sum(c(1:100), 1,2,3)
.Call(cmdline.arguments:::execute_pfunc, sum, list(1:100), list(1:10))
library(cmdline.arguments)
.Call(cmdline.arguments:::execute_pfunc, sum, list(1:100), list(1:10))
library(cmdline.arguments)
.Call(cmdline.arguments:::execute_pfunc, sum, list(1:100), list(1:10))
.Call(cmdline.arguments:::execute_pfunc, lm, list(formula = mpg ~ hp), list(data = mtcars))
person1<-c("supermarket","garage","garden centre","restaurant")
person2<-c("supermkt","park","gdn center","gym","italian restaurant")
lapply(person1, person2, max.distance = 0.3)
lapply(person1, function(x)agrep(person2, max.distance = 0.3))
?agrep
lapply(person1, function(x)agrep(x, person2, max.distance = 0.3))
unlist(lapply(person1, function(x)agrep(x, person2, max.distance = 0.3)))
agrep(person1, person2, max.distance = 0.3)
.Call(cmdline.arguments:::execute_pfunc, sum, list(1:100), list(1:10))
library(rsample)
?rsample::bootstraps()
data.frame(1:3, 3:5)
sample(data.frame(1:3, 3:5), 3)
replicate(sample(1:100, 50))
replicate(10, sample(1:100, 50))
?boot
?bootstraps
bootstraps(mtcars, )
boots <- bootstraps(mtcars, )
tidy(boots)
?abline
params lapply(1:10, lm(mpg ~ hp, data = mtcars))
params <- lapply(1:10, lm(mpg ~ hp, data = mtcars))
params <- lapply(1:10, function(x)lm(mpg ~ hp, data = mtcars))
params
params <- lapply(1:10, function(x)coef(lm(mpg ~ hp, data = mtcars)))
params
do.call(rbind, params)
samples
replicate(10, sample(1:100, 50))
dim(replicate(10, sample(1:100, 50)))
?unlink
unlink('helloworld')
?dplyr::arrange
library(cmdline.arguments)
.Call(cmdline.arguments:::execute_pfunc, sum, list(1:100), list(1:10))
.Call(cmdline.arguments:::execute_pfunc, sum, list(1:100), list())
library(cmdline.arguments)

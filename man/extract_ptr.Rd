% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{extract_ptr}
\alias{extract_ptr}
\alias{extract_ptr.cmd_arg}
\alias{extract_ptr.cmd_parser}
\title{Extract Cpp object pointer from object}
\usage{
extract_ptr(x, ...)

\method{extract_ptr}{cmd_arg}(x, ...)

\method{extract_ptr}{cmd_parser}(x, ...)
}
\arguments{
\item{x}{an object containing a external_ptr object}

\item{...}{further parameters passed to parent methods}
}
\value{
an external_ptr to the object in question.
}
\description{
The interface of cmdline.arguments is implemented using a
combination or R, Rcpp and the R-core C api. The R interface represents the
boiler plate and front-end interface for the user, while the backend is
represented by a network of C++ functions and classes to store arguments and
perform the actual cmdline argument parsing. While the user provides an R
function every effort is made to avoid unnecessary interaction with R.
It is not unlikely that several Internal parser functions (in time) will be
called or be reimplemented directly in C++ in due time, to avoid the tiny
overhead caused by evaluating a call from C++.
}
\section{Methods (by class)}{
\itemize{
\item \code{cmd_arg}: method for class "cmd_arg"

\item \code{cmd_parser}: method for class "cmd_parser"
}}

\note{
This method is NOT intended for usage by the end user. It is highly
recommended to only interface with the pointer through the standard methods
that has been exposed to the user. Anyone using this pointer directly should
spend a not insignificant amount of time consulting the source code of the
package.
}
